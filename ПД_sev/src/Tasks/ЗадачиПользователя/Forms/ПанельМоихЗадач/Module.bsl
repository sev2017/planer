
&НаКлиенте
Процедура ПоказыватьвВыполненныеПриИзменении(Элемент)
	ПоказыватьВыполненные();
КонецПроцедуры

&НаСервере
Процедура ПоказыватьВыполненные()
	ПараметрСКД = ПолучитьПараметрСКД(Список.Параметры, "Выполнен");
	ПараметрСКДКуратор = ПолучитьПараметрСКД(СписокКурируемыеЗадачи.Параметры, "Выполнен");
	Если ПоказыватьВыполненные Тогда
		ПараметрСКД.Использование = Ложь;
		ПараметрСКДКуратор.Использование = Ложь;
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("Выполнен", Истина); //
		СписокКурируемыеЗадачи.Параметры.УстановитьЗначениеПараметра("Выполнен", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрСКД(Параметры, ИмяПараметра)
	Перем ЗначениеВозврата;
	ЭлементыПараметров = Параметры.Элементы;
	Для Каждого ЭлементПараметр ИЗ ЭлементыПараметров Цикл 
		Если ИмяПараметра = Строка(ЭлементПараметр.Параметр) Тогда
			ЗначениеВозврата = ЭлементПараметр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеВозврата;
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПоказыватьВыполненные();
	СписокКурируемыеЗадачи.Параметры.УстановитьЗначениеПараметра("Куратор", ПараметрыСеанса.ТекущийПользователь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьСписокЗаданийКлиент", 30);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаданийКлиент()

	Элементы.Список.Обновить();
	Элементы.СписокКурируемыеЗадачи.Обновить();

КонецПроцедуры // ОбновитьСписокЗаданийКлиент()
