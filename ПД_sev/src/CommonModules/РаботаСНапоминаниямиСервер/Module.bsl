// Выполняет запрос по напоминаниям для текущего пользователя на момент времени ТекущаяДатаСеанса() + 30минут.
// Момент времени смещен от текущего для использования функции из модуля с повторным использованием
// возвращаемых значений.
// При обработке результата выполнения функции необходимо учитывать эту особенность.
//
// Параметры:
//	Нет
//
// Возвращаемое значение
//  Массив - таблица значений, сконвертированная в массив из структур, содержащих данные строк таблицы.
Функция ПолучитьНапоминанияТекущегоПользователя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Ссылка КАК Источник,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Объект КАК Объект,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Комментарий КАК Описание,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Проект КАК Проект,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.СрокНапоминания КАК СрокНапоминания,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.ВремяВыполнения КАК ВремяСобытия,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Куратор КАК Куратор,
	               |	ЗадачиПользователяЗадачиПоИсполнителю.Исполнитель КАК Пользователь,
				   |	2 КАК ИндексКартинки
	               |ИЗ
	               |	Задача.ЗадачиПользователя.ЗадачиПоИсполнителю КАК ЗадачиПользователяЗадачиПоИсполнителю
	               |ГДЕ
	               |	НЕ ЗадачиПользователяЗадачиПоИсполнителю.Выполнена
	               |	И НЕ ЗадачиПользователяЗадачиПоИсполнителю.ПометкаУдаления
	               |	И ЗадачиПользователяЗадачиПоИсполнителю.СрокНапоминания <= &ТекущаяДата
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗадачиПользователя.Ссылка КАК Источник,
	               |	ЗадачиПользователя.Объект КАК Объект,
	               |	ЗадачиПользователя.Комментарий КАК Описание,
	               |	ЗадачиПользователя.Проект,
	               |	ЗадачиПользователя.СрокНапоминания,
	               |	ЗадачиПользователя.ВремяВыполнения КАК ВремяСобытия,
	               |	ЗадачиПользователя.Куратор,
	               |	ЗадачиПользователя.Исполнитель КАК Пользователь,
				   |	2 КАК ИндексКартинки
	               |ИЗ
	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |ГДЕ
	               |	НЕ ЗадачиПользователя.Выполнена
	               |	И ЗадачиПользователя.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка)
	               |	И НЕ ЗадачиПользователя.ПометкаУдаления
	               |	И ЗадачиПользователя.СрокНапоминания <= &ТекущаяДата";
	
	//Запрос.Текст = 
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Напоминания.Пользователь КАК Пользователь,
	//|	Напоминания.ВремяСобытия КАК ВремяСобытия,
	//|	Напоминания.Источник КАК Источник,
	//|	Напоминания.СрокНапоминания КАК СрокНапоминания,
	//|	Напоминания.Описание КАК Описание,
	//|	2 КАК ИндексКартинки
	//|ИЗ
	//|	РегистрСведений.НапоминанияПользователя КАК Напоминания
	//|ГДЕ
	//|	Напоминания.СрокНапоминания <= &ТекущаяДата
	//|	И Напоминания.Пользователь = &Пользователь
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	ВремяСобытия";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());// +30 минут для кэша
	//Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = ОбщегоНазначения.ПолучитьМассивСтруктурИзТаблицы(Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВсеАктивныеНапоминания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиПользователя.Ссылка КАК Источник,
	               |	ЗадачиПользователя.Исполнитель КАК Пользователь,
	               |	ЗадачиПользователя.Наименование КАК Наименование,
	               |	ЗадачиПользователя.Комментарий КАК Комментарий
	               |ИЗ
	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |ГДЕ
	               |	НЕ ЗадачиПользователя.Выполнена
	               |	И НЕ ЗадачиПользователя.ПометкаУдаления
	               |	И ЗадачиПользователя.СрокНапоминания <= &ТекущаяДата";
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());// +30 минут для кэша
	//Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = ОбщегоНазначения.ПолучитьМассивСтруктурИзТаблицы(Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции
Функция ПолучитьВсеАктивныеНапоминанияДляКуратора() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗадачиПользователя.Ссылка КАК Источник,
	               |	ЗадачиПользователя.Исполнитель КАК Пользователь,
	               |	ЗадачиПользователя.Наименование КАК Наименование,
	               |	ЗадачиПользователя.Комментарий КАК Комментарий,
	               |	ЗадачиПользователя.Куратор КАК Куратор,
	               |	ЗадачиПользователя.ВремяВыполнения КАК ВремяВыполнения
	               |ИЗ
	               |	Задача.ЗадачиПользователя КАК ЗадачиПользователя
	               |ГДЕ
	               |	НЕ ЗадачиПользователя.Выполнена
	               |	И НЕ ЗадачиПользователя.ПометкаУдаления
	               |	И ЗадачиПользователя.ВремяВыполнения <= &ТекущаяДата
	               |	И НЕ ЗадачиПользователя.Куратор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССЫлка)";
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());// +30 минут для кэша
	//Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = ОбщегоНазначения.ПолучитьМассивСтруктурИзТаблицы(Запрос.Выполнить().Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Создает напоминание пользователя. Если по объекту уже есть напоминание, то перезаписывает его.
Процедура ПодключитьНапоминание(ПараметрыНапоминания, ОбновитьСрокНапоминания = Ложь) Экспорт
	
	ОбъектЗадача = ПараметрыНапоминания.Источник.ПолучитьОбъект();
	
	//НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	//НаборЗаписей.Отбор.Пользователь.Установить(ПараметрыНапоминания.Пользователь);
	//НаборЗаписей.Отбор.Источник.Установить(ПараметрыНапоминания.Источник);
	//
	Если ОбновитьСрокНапоминания Тогда
		ОбъектЗадача.СрокНапоминания = ПараметрыНапоминания.СрокНапоминания; 
		//НаборЗаписей.Отбор.ВремяСобытия.Установить(ПараметрыНапоминания.ВремяСобытия);
		//НаборЗаписей.Прочитать();
		//Если НаборЗаписей.Количество() = 0 Тогда
		//	Возврат;
		//КонецЕсли;
		//Для Каждого Запись Из НаборЗаписей Цикл
		//	ЗаполнитьЗначенияСвойств(Запись, ПараметрыНапоминания);
	//	//КонецЦикла;
	//Иначе
	//	НаборЗаписей.Прочитать();
	//	Если НаборЗаписей.Количество() > 0 Тогда
	//		ЗанятоеВремя = НаборЗаписей.Выгрузить(,"ВремяСобытия").ВыгрузитьКолонку("ВремяСобытия");
	//		Пока ЗанятоеВремя.Найти(ПараметрыНапоминания.ВремяСобытия) <> Неопределено Цикл
	//			ПараметрыНапоминания.ВремяСобытия = ПараметрыНапоминания.ВремяСобытия + 1;
	//		КонецЦикла;
	//	КонецЕсли;
	//	НоваяЗапись = НаборЗаписей.Добавить();
	//	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыНапоминания);
	КонецЕсли;
	ОбъектЗадача.Записать();
	//НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СоздатьНапоминание(стрПараметры) Экспорт 
	НовоеНапоминание = Задачи.ЗадачиПользователя.СоздатьЗадачу();
	НовоеНапоминание.Дата = ТекущаяДата();
	ЗаполнитьЗначенияСвойств(НовоеНапоминание, стрПараметры);
	НовоеНапоминание.Записать();	
КонецПроцедуры