
Процедура ЗаписатьВЛог(УИДУстройства, Текст) Экспорт 
	НаборЗаписейЛога = РегистрыСведений.МП_ЛогированиеОперацийТСД.СоздатьНаборЗаписей();
	//НаборЗаписейЛога.Отбор.ИмяУстройства.Установить(УИДУстройства);
	//НаборЗаписейЛога.Отбор.Период.Установить(ТекущаяДата());
	Запись 					= НаборЗаписейЛога.Добавить();
	Запись.Дата 			= ТекущаяДата();
	Запись.УИД 			= Новый УникальныйИдентификатор;
	Запись.ТСД 	= УИДУстройства;
	Запись.ЗапросОтвет 		= Текст;
	НаборЗаписейЛога.Записать(Ложь);
КонецПроцедуры

Функция ПолучитьСоздатьДокументПоГуид(стрГуид, НазваниеДокумента) Экспорт 	
	УИД 				= Новый УникальныйИдентификатор(стрГуид);
	ССылкаДокумент = Документы[НазваниеДокумента].ПолучитьСсылку(УИД);
	Объект 			= ССылкаДокумент.ПолучитьОбъект(); 	
	Если Объект 	= Неопределено Тогда  
		Объект 	= Документы[НазваниеДокумента].СоздатьДокумент();
		Объект.УстановитьСсылкуНового(ССылкаДокумент);
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции


//Возвращает ссылку на объект информационной базы
// Параметры
//структура содержит следующие параметры
//Тип - идентификатор типа объекта(Документ, Справочник и тд
//УИД - строка УИД-а
//ИмяМетаданных - имя объекта метаданных(из ЭТОЙ информационной базы)
Функция ПолучитьССылкуНаЭлементИзУида(стрПараметры) Экспорт 
	Перем ЗначениеВозврата;
	Если стрПараметры.УИД = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат ЗначениеВозврата;
	КонецЕсли;
	УИД 		= Новый УникальныйИдентификатор(стрПараметры.УИД);
	Если стрПараметры.Тип = "Справочник" Тогда
		ЗначениеВозврата = Справочники[стрПараметры.ИмяМетаданных].ПолучитьСсылку(УИД);	
	ИначеЕсли стрПараметры.Тип = "Документ" Тогда
		ЗначениеВозврата = Документы[стрПараметры.ИмяМетаданных].ПолучитьСсылку(УИД);
	КонецЕсли;
	Если Не ЗначениеВозврата = Неопределено И ЗначениеВозврата.ПолучитьОбъект() = Неопределено Тогда
		ЗначениеВозврата = Неопределено;	
	КонецЕсли;
	Возврат ЗначениеВозврата; 		
КонецФункции

//Преобразует значение параметра в примитивный тип данных для выдачи через веб сервис
Функция ПреобразоватьЗначениеВПростойТип(Значение)
	Перем ЗначениеВозврата;
	СписокПростыхТипов = Новый СписокЗначений;
	СписокПростыхТипов.Добавить(Тип("Число"));
	СписокПростыхТипов.Добавить(Тип("Строка"));
	СписокПростыхТипов.Добавить(Тип("Булево"));
	СписокПростыхТипов.Добавить(Тип("Дата"));
	Если Не СписокПростыхТипов.НайтиПоЗначению(ТипЗнч(Значение)) = Неопределено Тогда
		ЗначениеВозврата = Значение;
	ИначеЕсли Метаданные.Справочники.Содержит(Значение.Метаданные()) Тогда
		СтруктураXDTO = Новый Структура;
		СтруктураXDTO.Вставить("УИД", Строка(Значение.УникальныйИдентификатор())); 
		СтруктураXDTO.Вставить("Наименование", Значение.Наименование);
		СтруктураXDTO.Вставить("ИмяМетаданных", Значение.Метаданные().Имя); 
		СтруктураXDTO.Вставить("ДополнительноеОписание", ПолучитьДополнительноеОписаниеДокумента(Значение)); 
		СтруктураXDTO.Вставить("Тип", "Справочник");
		ЗначениеВозврата = СтруктураXDTO; 
	ИначеЕсли Метаданные.Документы.Содержит(Значение.Метаданные()) Тогда	
		СтруктураXDTO = Новый Структура;
		СтруктураXDTO.Вставить("УИД", Строка(Значение.УникальныйИдентификатор())); 
		СтруктураXDTO.Вставить("Наименование", Строка(Значение));
		СтруктураXDTO.Вставить("ИмяМетаданных", Значение.Метаданные().Имя); 
		СтруктураXDTO.Вставить("ДополнительноеОписание", ПолучитьДополнительноеОписаниеДокумента(Значение)); 
		СтруктураXDTO.Вставить("Тип", "Документ");		
		ЗначениеВозврата = СтруктураXDTO;
	ИначеЕсли Метаданные.Перечисления.Содержит(Значение.Метаданные()) Тогда	
		СтруктураXDTO = Новый Структура; 
		//СтруктураXDTO.Вставить("УИД", Строка(Значение.УникальныйИдентификатор())); 
		СтруктураXDTO.Вставить("Наименование", ПолучитьИмяПеречисления(Значение));
		СтруктураXDTO.Вставить("ИмяМетаданных", Значение.Метаданные().Имя); 	
		СтруктураXDTO.Вставить("Тип", "Перечисление");
		ЗначениеВозврата = СтруктураXDTO;
	Иначе
		ЗначениеВозврата = Неопределено;		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции // ЗначениеРеквизитаВПростойТип()

// Возвращает имя значения перечисления
//
// Параметры
//  Ссылка  – ПеречислениеСсылка – ссылка на значение перечисления, имя которого
//                 надо получить
//
// Возвращаемое значение:
//   Строка   – имя значения перечисления
//
Функция ПолучитьИмяПеречисления(Ссылка) Экспорт

	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
    ИмяПеречисления = Ссылка.Метаданные().Имя;
    Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);
    
    Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;

КонецФункции // обИмяПеречисления()

Функция ПолучитьДополнительноеОписаниеДокумента(Ссылка) Экспорт 
	//ЗначениеВозврата = "";
	//Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
	//	ЗначениеВозврата = Строка(Ссылка.СкладОтправитель) + " -> " + Строка(Ссылка.СкладПолучатель);
	//ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Номенклатура") Тогда
	//	ЗначениеВозврата = Строка(Ссылка.БП_Брэнд);	
	//Иначе
		ЗначениеВозврата = "";
	//КонецЕсли;	
	Возврат ЗначениеВозврата
КонецФункции

Функция Авторизация(УидУстройства) Экспорт 
	
	//ХранилищаЗначенийТип	= ФабрикаXDTO.Тип("http://www.universal-package.org", "ХранилищаЗначений");
	//ХранилищаЗначений		= ФабрикаXDTO.Создать(ХранилищаЗначенийТип);
	
	СтруктураОтвет = Новый Структура;
	
	Если Не ЗначениеЗаполнено(УидУстройства) Тогда
		СтруктураОтвет.Вставить("ДоступРазрешен", Ложь);
		СтруктураОтвет.Вставить("ДопИнфо", "Получен некорректный идентификатор устройства, доступ запрещен!");
	 	Возврат СтруктураОтвет;
	КонецЕсли;
	//Если ЗначениеЗаполнено(УидУстройства) Тогда 
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	МП_ВнешниеУстройства.БессрочноАктивноеУстройство КАК Активен,
	               |	МП_ВнешниеУстройства.Ссылка КАК Ссылка,
	               |	МП_ВнешниеУстройства.СрокДействияАктивности,
	               |	МП_ВнешниеУстройства.Код
	               |ИЗ
	               |	Справочник.МП_ВнешниеУстройства КАК МП_ВнешниеУстройства
	               |ГДЕ
	               |	МП_ВнешниеУстройства.УИД = &УИДВнешнего";
	Запрос.УстановитьПараметр("УИДВнешнего", УидУстройства);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Если Выборка.Активен ИЛИ Выборка.СрокДействияАктивности > ТекущаяДата() Тогда 
			СтруктураОтвет.Вставить("ДоступРазрешен", Истина);
		Иначе 
			Номер = ОбщегоНазначения.УдалитьЛидирующиеНули(Строка(Выборка.Код));
			СтруктураОтвет.Вставить("ДоступРазрешен", Ложь);
			СтруктураОтвет.Вставить("ДопИнфо", "Вам не разрешен доступ или истек временный токен доступа!(Код вашего устройства " + Номер + ")");
		КонецЕсли;	
	Иначе
		НовоеВнешнееУстройство = Справочники.МП_ВнешниеУстройства.СоздатьЭлемент();
		НовоеВнешнееУстройство.УИД = УидУстройства;
		НовоеВнешнееУстройство.Наименование = "Новое устройство, ожидает подтверждения доступа";
		НовоеВнешнееУстройство.Записать();
		Номер = ОбщегоНазначения.УдалитьЛидирующиеНули(Строка(НовоеВнешнееУстройство.Код));
		СтруктураОтвет.Вставить("ДоступРазрешен", Ложь);
		СтруктураОтвет.Вставить("ДопИнфо", "Ваше устройство зарегистрировано в системе, для продолжения работы необходимо подтвержнение администратор!(Код вашего устройства " + Номер + ")");
	КонецЕсли;	
	
	Возврат СтруктураОтвет;
КонецФункции

Функция ПолучитьНастройкиДляТСД(ссылкаТСД) Экспорт 
	Если ссылкаТСД = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	ЗначениеВозврата = Новый Структура;
	//Дополнительный права на терминале
	ТЗПрава = Справочники.МП_ВнешниеУстройства.ПолучитьТЗДополнительныхПрав(ссылкаТСД);
	ТЗПраваЭкспорт = Новый ТаблицаЗначений;
	ТЗПраваЭкспорт.Колонки.Добавить("НаименованиеПрава");
	ТЗПраваЭкспорт.Колонки.Добавить("ЗначениеПрава");
	Для Каждого СтрокаПрава ИЗ ТЗПрава Цикл 
		НоваяСтрокаПрава = ТЗПраваЭкспорт.Добавить(); 
		НоваяСтрокаПрава.НаименованиеПрава = Справочники.МП_ДополнительныеПраваТСД.ПолучитьИмяПредопределенного(СтрокаПрава.Право);
		НоваяСтрокаПрава.ЗначениеПрава = СтрокаПрава.ЗначениеПрава;	
	КонецЦикла;
	стрКонстанты = Новый Структура;
	стрКонстанты.Вставить("Пользователь", ПреобразоватьЗначениеВПростойТип(ссылкаТСД.Пользователь));
	//стрКонстанты.Вставить("Склад", ПреобразоватьЗначениеВПростойТип(ссылкаТСД.Склад));
	//стрКонстанты.Вставить("Автомобиль", ПреобразоватьЗначениеВПростойТип(ссылкаТСД.Автомобиль));	
	стрКонстанты.Вставить("ВидУстройства", ПреобразоватьЗначениеВПростойТип(ссылкаТСД.ВидУстройства));	
	стрКонстанты.Вставить("ПарольАдминистратора", Константы.МП_ПарольАдминистратора.Получить());
	
	ЗначениеВозврата.Вставить("ТЗПраваЭкспорт", ТЗПраваЭкспорт);
	ЗначениеВозврата.Вставить("Константы", стрКонстанты);
	//ЗначениеВозврата.Вставить("Склад", ссылкаТСД.Склад);
	//ЗначениеВозврата.Вставить("Пользователь", ссылкаТСД.Пользователь);
	Возврат ЗначениеВозврата
КонецФункции // ПолучитьНастройкиДляТСД()

Функция ПолучитьОсновныеСправочники(УИДУстройства) Экспорт 
	
	ЗаписатьВЛог(УИДУстройства, "Запрос на получение пользователя/склада (старт)"); 
	
	ТипСтрока 	  			= Новый ОписаниеТипов("Строка");

	ТЗПользователь = Новый ТаблицаЗначений;
	ТЗПользователь.Колонки.Добавить("ГуидПользователь",		 ТипСтрока);
	//ТЗПользователь.Колонки.Добавить("ГуидСклад",		 ТипСтрока);
	ТЗПользователь.Колонки.Добавить("Наименование", ТипСтрока);	
	
	ТЗПроекты = Новый ТаблицаЗначений;
	ТЗПроекты.Колонки.Добавить("ГуидПроект",		 ТипСтрока);
	//ТЗПользователь.Колонки.Добавить("ГуидСклад",		 ТипСтрока);
	ТЗПроекты.Колонки.Добавить("Наименование", ТипСтрока);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Пользователи.Ссылка,
	|	Пользователи.Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления";
	ВыборкаПользователь = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПользователь.Следующий() Цикл  
		СтрокаПользователь								= ТЗПользователь.Добавить();
		СтрокаПользователь.ГуидПользователь				= Строка(ВыборкаПользователь.Ссылка.УникальныйИдентификатор());	
		СтрокаПользователь.Наименование 	= Строка(ВыборкаПользователь.Наименование);	
		//СтрокаПользователь.ГуидСклад					= Строка(ВыборкаПользователь.СкладПользователя.УникальныйИдентификатор());
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Проекты.Ссылка,
	               |	Проекты.Наименование
	               |ИЗ
	               |	Справочник.Проекты КАК Проекты
	               |ГДЕ
	               |	НЕ Проекты.ПометкаУдаления
	               |	И НЕ Проекты.ЭтоГруппа";
	ВыборкаПроект = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПроект.Следующий() Цикл  
		СтрокаПользователь					= ТЗПроекты.Добавить();
		СтрокаПользователь.ГуидПроект		= Строка(ВыборкаПроект.Ссылка.УникальныйИдентификатор());	
		СтрокаПользователь.Наименование 	= Строка(ВыборкаПроект.Наименование);	
		//СтрокаПользователь.ГуидСклад					= Строка(ВыборкаПользователь.СкладПользователя.УникальныйИдентификатор());
	КонецЦикла;

	ЗаписатьВЛог(УИДУстройства, "Запрос на получение пользователя/склада (окончание)"); 
	ЗначениеВозврата = Новый Структура;
	//ЗначениеВозврата.Вставить("Склады", ТЗСклад); 
	ЗначениеВозврата.Вставить("Пользователи", ТЗПользователь);
	ЗначениеВозврата.Вставить("Проекты", ТЗПроекты); 
	//ЗначениеВозврата.Вставить("Транспорт", ТЗТранспорт); 
	Возврат ЗначениеВозврата; 
	
КонецФункции

Функция ЗапросРазрешенияМенятьДокумент(стрДокумент) Экспорт 
	стрВозврат = Новый Структура;
	ДокументСсылка = ПолучитьССылкуНаЭлементИзУида(стрДокумент); 
	Если ДокументСсылка = Неопределено Тогда
		стрВозврат.Вставить("Разрешено", Истина);
		стрВозврат.Вставить("ДопИнфо", "Не удалось найти этот документ в информационной базе.");
	Иначе
		ДатаДокумента = Документссылка.Дата;
		ТекДата = ТекущаяДата();
		Разрешено = Истина;
		Если ДатаДокумента < НачалоДня(ТекДата) Тогда
			Разрешено = Ложь;
		КонецЕсли;
		стрВозврат.Вставить("Разрешено", Разрешено);
	КонецЕсли;
	
	Возврат стрВозврат;	
КонецФункции

Функция СоздатьОбновитьДокументРабочееВремя(стрПараметры, ссылкаТСД) Экспорт 
	стрВозврат = Новый Структура;
	ДокументСсылка = ПолучитьССылкуНаЭлементИзУида(стрПараметры.Документ);
	ПроектСсылка = ПолучитьССылкуНаЭлементИзУида(стрПараметры.Проект);
	СотрудникСсылка = ПолучитьССылкуНаЭлементИзУида(стрПараметры.Сотрудник);
	//Если ДокументСсылка = Неопределено Тогда
	ДокументСсылка = УправлениеРабочимВременем.СоздатьОбновитьДокументРабочееВремя(ДокументСсылка, ПроектСсылка, СотрудникСсылка, ссылкаТСД, стрПараметры);	
	стрВозврат = ПреобразоватьЗначениеВПростойТип(ДокументСсылка);
	стрВозврат.Вставить("Успешно", Истина);
	стрВозврат.Вставить("Согласовано", ДокументСсылка.Согласовано);
	//Иначе
	//	УправлениеРабочимВременем.ОбновитьДокументРабочеговремени(ДокументСсылка, стрДокумент);
	//КонецЕсли;
	
	Возврат стрВозврат;	
КонецФункции

Функция ПроверкаСОгласованностиДокумента(стрПараметры, ЭлементТСД) Экспорт 
	ДокументСсылка = ПолучитьССылкуНаЭлементИзУида(стрПараметры);
	стрВозврат = Новый Структура;
	стрВозврат.Вставить("Согласовано", ?(ДокументСсылка = Неопределено, Неопределено, ДокументСсылка.Согласовано));
	Возврат стрВозврат;
КонецФункции

Функция ПолучитьОтчетПоНачислениям() Экспорт 
	Перем ЗначениеВозврата;
	Сотрудник = ПараметрыСеанса.ТекущийПользователь.Сотрудник;	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ЗначениеВозврата;
	КонецЕсли;	
	
	МассивструктурОтбор = Новый Массив;
	МассивструктурОтбор.Добавить(Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение", "Сотрудник", "Равно", Сотрудник));
	стрТабДок = УправлениеОтчетамиСервер.ПолучитьТабДокИзОтчетаСКД("Начисления", "СКДНачисленияДляМП",, МассивструктурОтбор); 
	ОтчетПоПроекту = стрТабДок.ТабДок;	
	Возврат ОтчетПоПроекту;
КонецФункции