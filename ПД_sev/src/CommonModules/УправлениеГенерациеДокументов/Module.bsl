Процедура ВыполнитьГенерациюДокументов(Коннектор, СсылкаЗадание, Период = Неопределено, СообщениеОбОшибке = "") Экспорт 
	СообщениеОбОшибке = "";	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	Коннектор.НачатьТранзакцию();
	Префикс =  Формат(Период, "ДФ=yyyyMMdd-");	
	СсылкаСчетНаОплату = СоздатьСчетНаОплатуПокупателя(Коннектор, СсылкаЗадание.ДоговорОбслуживания, Период, СообщениеОбОшибке);
	Если Не СсылкаСчетНаОплату = Неопределено Тогда 
		стрРТУиСФ = СоздатьДокументРТУ(Коннектор, СсылкаСчетНаОплату, Период, Префикс);
	КонецЕсли;
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		РаботаСЭлектроннойПочтойСервер.ОтправитьПисьмоОбОшибке("Ошибка приформировании документов по заданию  "  + Строка(СсылкаЗадание), СообщениеОбОшибке); 
		Возврат
	КонецЕсли;
	Коннектор.ЗафиксироватьТранзакцию();
	СделатьЗаписьВЖурналеГенерацииДокументов(СсылкаЗадание.ДоговорОбслуживания, Период);
	
	стрРТУиСФ.Вставить("СчетНаОплату", СсылкаСчетНаОплату);
	//Если стрРТУиСФ.РТУ.Товары.Количество() > 0 Тогда 
	//	стрРТУиСФ.Вставить("ТоварнаяНакладная", стрРТУиСФ.РТУ);
	//КонецЕсли;
	//Если стрРТУиСФ.РТУ.Услуги.Количество() > 0 Тогда 
	//	стрРТУиСФ.Вставить("Акт", стрРТУиСФ.РТУ);
	//КонецЕсли;	
	стрРТУиСФ.Вставить("РТУ", стрРТУиСФ.РТУ);
	стрPDFФайлыДокументов = СформироватьФайлыДокументов(Коннектор, стрРТУиСФ);  
	стрPDFФайлыДокументов.Вставить("Акт", стрPDFФайлыДокументов.РеализацияТоваровУслуг.Акт);
	стрPDFФайлыДокументов.Удалить("РеализацияТоваровУслуг");
	РаботаСЭлектроннойПочтойСервер.СформироватьРассылкуПервичнойДокументации(стрPDFФайлыДокументов, СсылкаЗадание);
КонецПроцедуры

Процедура ВыполнитьГенерациюДокументовЛокально(СсылкаЗадание, Период = Неопределено, СообщениеОбОшибке = "") Экспорт 
	СообщениеОбОшибке = "";	
	Если Период = Неопределено Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	
	СсылкаСчетНаОплату = СоздатьСчетНаОплатуПокупателяЛокально(СсылкаЗадание.ДоговорОбслуживания, Период, СообщениеОбОшибке);
	
	СделатьЗаписьВЖурналеГенерацииДокументов(СсылкаЗадание.ДоговорОбслуживания, Период);
	
	РаботаСЭлектроннойПочтойСервер.СформироватьРассылкуПервичнойДокументации(,СсылкаЗадание);
	
	Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
		РаботаСЭлектроннойПочтойСервер.ОтправитьПисьмоОбОшибке("Ошибка приформировании документов по заданию  "  + Строка(СсылкаЗадание), СообщениеОбОшибке); 
		Возврат
	КонецЕсли;	
КонецПроцедуры

Процедура СделатьЗаписьВЖурналеГенерацииДокументов(СсылкаДоговорОбслуживания, Период)
	МенеджерЗаписи = РегистрыСведений.ЖурналГенерацииДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДоговорОбслуживания = СсылкаДоговорОбслуживания;
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Записать();
КонецПроцедуры

Функция СоздатьСчетНаОплатуПокупателя(Коннектор, ДоговорОбслуживания, Период, СообщениеОбОшибке = "")
	Перем ЗначениеВозврата;
	ДокТам	=	Коннектор.Документы.СчетНаОплатуПокупателю.СоздатьДокумент();	
	//Шапка
	ДокТам.Организация				=	Коннектор.Справочники.Организации.НайтиПоКоду(ДоговорОбслуживания.Организация.COMКодОрганизации);
	ДокТам.ОрганизацияПолучатель	=	Коннектор.Справочники.Организации.НайтиПоКоду(ДоговорОбслуживания.Организация.COMКодОрганизации);
	ДокТам.СтруктурнаяЕдиница		=	ДокТам.Организация.ОсновнойБанковскийСчет;
	ДокТам.Дата						=	Период;
	ДокТам.Склад					=	Коннектор.Справочники.Склады.НайтиПоКоду("000000001");
	ДокТам.Контрагент				=	ПолучитьКонтрагентаТам(Коннектор, ДоговорОбслуживания.Контрагент, ДоговорОбслуживания.Организация, СообщениеОбОшибке);
	ДокТам.ДоговорКонтрагента		=	ДокТам.Контрагент.ОсновнойДоговорКонтрагента;
	ДокТам.ВалютаДокумента			=	Коннектор.Справочники.Валюты.НайтиПоКоду(643);
	ДокТам.Комментарий				=	"Перенесен из Планировщик Договоров "+ТекущаяДата();	
	ДокТам.КратностьВзаиморасчетов	=	1;
	ДокТам.КурсВзаиморасчетов		=	1;	
	ДокТам.УчитыватьНДС				=	ДоговорОбслуживания.УчитыватьНДС;
	ДокТам.СуммаВключаетНДС			=	ДоговорОбслуживания.СуммаВключаетНДС;
	
	КодНоменклатуры = Константы.COMКодНоменклатурыУслуги.Получить();
	
	СтрокаТам				=	ДокТам.Услуги.Добавить();
	СтрокаТам.Номенклатура	=	Коннектор.Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);	
	СтрокаТам.Количество	=	1;
	СтрокаТам.Цена			=	ДоговорОбслуживания.СуммаДоговора;
	СтрокаТам.Сумма			=	ДоговорОбслуживания.СуммаДоговора;
	СтрокаТам.СуммаНДС		=	ПолучитьСуммаНДС(Коннектор, СтрокаТам.Номенклатура.СтавкаНДС, СтрокаТам.Сумма);
	СтрокаТам.СтавкаНДС		=	СтрокаТам.Номенклатура.СтавкаНДС;
	СтрокаТам.Содержание	=	СформироватьОписаниеУслуги(ДоговорОбслуживания.НаименованиеУслуги, Период);
	
	Попытка 
		ДокТам.Записать();
		ЗначениеВозврата = ДокТам.Ссылка;	
	Исключение   
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;		
	
	Возврат ЗначениеВозврата;		
КонецФункции

Функция СоздатьСчетНаОплатуПокупателяЛокально(ДоговорОбслуживания, Период, СообщениеОбОшибке = "")
	Перем ЗначениеВозврата;
	ДокТам	=	Документы.СчетПокупателя.СоздатьДокумент();	
	//Шапка
	
	ДокТам.Дата						=	Период;
	ДокТам.Контрагент				=	ДоговорОбслуживания.Контрагент;
	ДокТам.Организация				=	ДоговорОбслуживания.Организация;
	ДокТам.Комментарий				=	"Счет за обслуживание по договору " + ДоговорОбслуживания + " от " + ТекущаяДата();	

	СтрокаТам				=	ДокТам.Товары.Добавить();
	СтрокаТам.Наименование	=	СформироватьОписаниеУслуги(ДоговорОбслуживания.НаименованиеУслуги, Период);
	СтрокаТам.Количество	=	1;
	СтрокаТам.Цена			=	ДоговорОбслуживания.СуммаДоговора;
	СтрокаТам.Сумма			=	ДоговорОбслуживания.СуммаДоговора;
	СтрокаТам.Услуга		=	Истина;
	
	Попытка 
		ДокТам.Записать();
		ЗначениеВозврата = ДокТам.Ссылка;	
	Исключение   
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;		
	
	Возврат ЗначениеВозврата;		
КонецФункции

Функция СоздатьСчетНаОплатуПокупателяСТоваром(СчетНаОплатуСсылка, Коннектор, СсылкаСчет, ТаблицаТоваров, Период, СообщениеОбОшибке = "") Экспорт 
	Перем ЗначениеВозврата;
	Если СчетНаОплатуСсылка = Неопределено Тогда
		ДокТам	=	Коннектор.Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
	Иначе
		ДокТам	=	СчетНаОплатуСсылка.ПолучитьОбъект();	
		ДокТам.Услуги.Очистить();
		ДокТам.Товары.Очистить();
	КонецЕсли;
	//Шапка
	ДокТам.Организация				=	Коннектор.Справочники.Организации.НайтиПоКоду(СсылкаСчет.Организация.COMКодОрганизации);
	ДокТам.ОрганизацияПолучатель	=	ДокТам.Организация;
	ДокТам.СтруктурнаяЕдиница		=	ДокТам.Организация.ОсновнойБанковскийСчет;
	ДокТам.Дата						=	Период;
	ДокТам.Номер					=	СсылкаСчет.НомерFM;
	ДокТам.Склад					=	Коннектор.Справочники.Склады.НайтиПоКоду(СсылкаСчет.Организация.КодСклада);//"000000001");
	ДокТам.Контрагент				=	ПолучитьКонтрагентаТам(Коннектор, СсылкаСчет.Контрагент, СсылкаСчет.Организация, СообщениеОбОшибке);
	ДокТам.ДоговорКонтрагента		=	ДокТам.Контрагент.ОсновнойДоговорКонтрагента;
	ДокТам.ВалютаДокумента			=	Коннектор.Справочники.Валюты.НайтиПоКоду(643);
	ДокТам.Комментарий				=	"Перенесен из Планировщик Договоров "+ТекущаяДата();	
	ДокТам.КратностьВзаиморасчетов	=	1;
	ДокТам.КурсВзаиморасчетов		=	1;	
	ДокТам.УчитыватьНДС				=	Истина;//ДоговорОбслуживания.УчитыватьНДС;
	ДокТам.СуммаВключаетНДС			=	Истина;//ДоговорОбслуживания.СуммаВключаетНДС;
	КодНоменклатурыУслуги = СсылкаСчет.Организация.COMКодНоменклатурыУслуги;
	//КодНоменклатуры = Константы.COMКодНоменклатурыУслуги.Получить();
	Для Каждого СтрокаТовара ИЗ ТаблицаТоваров Цикл 
		Если СтрокаТовара.Услуга = 1 Тогда
			СтрокаТам				=	ДокТам.Услуги.Добавить();
			НоменклатураТамСсылка	=	Коннектор.Справочники.Номенклатура.НайтиПоКоду(КодНоменклатурыУслуги);
			СтрокаТам.Содержание	=   СтрокаТовара.Наименование;
		Иначе
			СтрокаТам				=	ДокТам.Товары.Добавить();
			НоменклатураТамСсылка 		=   Коннектор.Справочники.Номенклатура.НайтиПоНаименованию(СтрокаТовара.Наименование, Истина);
			Если НоменклатураТамСсылка	=   Коннектор.Справочники.Номенклатура.ПустаяССылка() Тогда
				НоменклатураТамСсылка	=	СоздатьЭлементНоменклатурыТам(Коннектор, СтрокаТовара.Наименование, ?(СтрокаТовара.Услуга = 1, Истина, Ложь));
			КонецЕсли;
		КонецЕсли;
		СтрокаТам.Номенклатура	=	НоменклатураТамСсылка;		
		СтрокаТам.Количество	=	СтрокаТовара.Количество;
		СтрокаТам.Цена			=	СтрокаТовара.Сумма / СтрокаТовара.Количество;
		СтрокаТам.Сумма			=	СтрокаТовара.Сумма;
		СтрокаТам.СуммаНДС		=	ПолучитьСуммаНДС(Коннектор, СтрокаТам.Номенклатура.СтавкаНДС, СтрокаТам.Сумма);
		СтрокаТам.СтавкаНДС		=	СтрокаТам.Номенклатура.СтавкаНДС;
		//СтрокаТам.Содержание	=	СформироватьОписаниеУслуги(ДоговорОбслуживания.НаименованиеУслуги, Период);
	КонецЦикла;
	Попытка 
		ДокТам.Записать();
		ЗначениеВозврата = ДокТам.Ссылка;	
	Исключение   
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка);	
	КонецПопытки;		
	
	Возврат ЗначениеВозврата;		
КонецФункции

Функция СоздатьЭлементНоменклатурыТам(Коннектор, Наименование, булУслуга) 
	Перем ЗначениеВозврата;		
	НоваяНоменклатураТАм	=	Коннектор.Справочники.Номенклатура.СоздатьЭлемент();	
	НоваяНоменклатураТАм.Наименование	=	Наименование;
	НоваяНоменклатураТАм.НаименованиеПолное	=	Наименование;
	НоваяНоменклатураТАм.Услуга				=	булУслуга;		
	Если НоваяНоменклатураТАм.Услуга Тогда
		НоваяНоменклатураТАм.НоменклатурнаяГруппа = Коннектор.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Услуга");
		НоваяНоменклатураТАм.Родитель = Коннектор.Справочники.Номенклатура.НайтиПоНаименованию("УСЛУГИ"); 
	Иначе	
		НоваяНоменклатураТАм.НоменклатурнаяГруппа = Коннектор.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Товар");
		НоваяНоменклатураТАм.Родитель = Коннектор.Справочники.Номенклатура.НайтиПоНаименованию("ТОВАРЫ");
	КонеЦесли;
	НоваяНоменклатураТАм.СтавкаНДС	=	Коннектор.Перечисления.СтавкиНДС.НДС18;						
	НоваяНоменклатураТАм.БазоваяЕдиницаИзмерения = Коннектор.Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	Попытка 
		НоваяНоменклатураТАм.Записать();
	Исключение   
		Сообщить("Невозможно записать элемент справочника Номенклатура - "+НоваяНоменклатураТАм.Наименование + Символы.ПС + ОписаниеОшибки());
		Возврат ЗначениеВозврата;
	КонецПопытки;
	ЗначениеВозврата = НоваяНоменклатураТАм.Ссылка;
	
	Возврат ЗначениеВозврата
КонецФункции

Функция СоздатьДокументРТУ(Коннектор, СсылкаСчетНаОплату, Период, Префикс, ПереформироватьДокументы = Ложь) Экспорт 
	
	Если ПереформироватьДокументы Тогда
		СсылкаДокТам = Коннектор.Документы.РеализацияТоваровУслуг.НайтиПоРеквизиту("СчетНаОплатуПокупателю", СсылкаСчетНаОплату); 
		Если СсылкаДокТам = Коннектор.Документы.РеализацияТоваровУслуг.ПустаяССылка() Тогда  
			ДокТам	=	Коннектор.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Иначе
			ДокТам	=	СсылкаДокТам.ПолучитьОбъект();	
			ДокТам.Услуги.Очистить();
			ДокТам.Товары.Очистить();			
		КонецЕсли;		
	Иначе
		ДокТам	=	Коннектор.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	КонецЕсли;
	ДокТам.Заполнить(СсылкаСчетНаОплату);
	
	//Шапка
	//ДокТам.Организация				=	Коннектор.Справочники.Организации.НайтиПоНаименованию(ДоговорОбслуживания.Организация.Наименование);
	ДокТам.Дата						=	Период;
	ДокТам.УстановитьНовыйНомер(Префикс);

	//ДокТам.Склад					=	Коннектор.Справочники.Склады.НайтиПоКоду("000000001");
	//ДокТам.Контрагент				=	ПолучитьКонтрагентаТам(Коннектор, ДоговорОбслуживания.Контрагент, ДоговорОбслуживания.Организация, СообщениеОбОшибке);
	//ДокТам.ДоговорКонтрагента		=	ДокТам.Контрагент.ОсновнойДоговорКонтрагента;
	//ДокТам.СчетНаОплатуПокупателю	= 	СсылкаСчетНаОплату;	
	//ДокТам.СпособЗачетаАвансов		=	Коннектор.Перечисления.СпособыЗачетаАвансов.Автоматически;
	//ДокТам.Комментарий				=	"Перенесен из ПланировщикДоговоров "+ТекущаяДата();
	//ДокТам.УчитыватьНДС				=	ДоговорОбслуживания.УчитыватьНДС;
	//ДокТам.СуммаВключаетНДС			=	ДоговорОбслуживания.СуммаВключаетНДС;
	//ДокТам.КурсВзаиморасчетов		=	1;
	//ДокТам.КратностьВзаиморасчетов	=	1;
	//ДокТам.ВалютаДокумента			=	Коннектор.Справочники.Валюты.НайтиПоКоду(643);
	ДокТам.ВидОперации				=	Коннектор.Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	//
	//ДокТам.СчетУчетаРасчетовСКонтрагентом	=	Коннектор.ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	//ДокТам.СчетУчетаРасчетовПоАвансам		=	Коннектор.ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	//КодНоменклатуры = Константы.COMКодНоменклатурыУслуги.Получить();
	//
	//СтрокаТам				=	ДокТам.Услуги.Добавить();
	//СтрокаТам.Номенклатура	=	Коннектор.Справочники.Номенклатура.НайтиПоКоду(КодНоменклатуры);	
	//СтрокаТам.Количество	=	1;
	//СтрокаТам.Цена			=	ДоговорОбслуживания.СуммаДоговора;
	//СтрокаТам.Сумма			=	ДоговорОбслуживания.СуммаДоговора;
	//СтрокаТам.СуммаНДС		=	ПолучитьСуммаНДС(Коннектор, СтрокаТам.Номенклатура.СтавкаНДС, СтрокаТам.Сумма);
	//СтрокаТам.СтавкаНДС		=	СтрокаТам.Номенклатура.СтавкаНДС;
	//СтрокаТам.Содержание	=	СформироватьОписаниеУслуги(ДоговорОбслуживания.НаименованиеУслуги, Период);
	//
	//СтрокаТам.СчетУчетаНДСПоРеализации	=	Коннектор.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.03");
	//СтрокаТам.СчетДоходов				=	Коннектор.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.1");
	//СтрокаТам.СчетРасходов				=	Коннектор.ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
	
	Попытка 
		ДокТам.Записать(Коннектор.РежимЗаписиДокумента.Проведение);
	Исключение   
		Сообщить("Не удалось провести документ РТУ, по счету " + Строка(СсылкаСчетНаОплату) + Символы.ПС + ОписаниеОшибки());	
		Возврат Неопределено;	
	КонецПопытки; 
	
	Попытка
		ссылкаСчетФактура = СоздатьСФВыданный(Коннектор, ДокТам.Ссылка, Префикс, ПереформироватьДокументы);
	Исключение
		Сообщить("Не удалось провести документ СФ, по РТУ " + Строка(ДокТам.Ссылка) + Символы.ПС + ОписаниеОшибки());	
		Возврат Неопределено;	
	КонецПопытки;
	
	стрВозврат = Новый Структура("РТУ, СФ", ДокТам.Ссылка, ссылкаСчетФактура);
	
	Возврат стрВозврат;
КонецФункции // СоздатьДокументРТУ()

Функция СоздатьСФВыданный(Коннектор, ДокТамСсылка, Префикс, ПереформироватьДокументы = Ложь)
	Перем ЗначениеВозврата;
	Если ПереформироватьДокументы Тогда
		СчетФактураТам = Коннектор.УчетНДС.НайтиПодчиненныйСчетФактуру(ДокТамСсылка, "СчетФактураВыданный");	
		Если НЕ СчетФактураТам = Неопределено Тогда
		//	НоваяСФТам	=	Коннектор.Документы.СчетФактураВыданный.СоздатьДокумент();
		//Иначе	
			НоваяСФТам = СчетФактураТам.ПолучитьОбъект(); 	
			НоваяСФТам.Удалить();
		КонецЕсли;
		//НоваяСФТам	=	Коннектор.Документы.СчетФактураВыданный.СоздатьДокумент();
	//Иначе
	//	НоваяСФТам	=	Коннектор.Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;
	НоваяСФТам	=	Коннектор.Документы.СчетФактураВыданный.СоздатьДокумент();	
	НоваяСФТам.Заполнить(ДокТамСсылка);
	НоваяСФТам.УстановитьНовыйНомер(Префикс);
	НоваяСФТам.ВидСчетаФактуры = Коннектор.Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;                           	
	
	Попытка 
		НоваяСФТам.Записать(Коннектор.РежимЗаписиДокумента.Проведение);
		ЗначениеВозврата = НоваяСФТам.Ссылка;	
	Исключение   
		Сообщить("Не удалось привязать к контрагенту основной договор " + ОписаниеОшибки());	
	КонецПопытки;		
	
	Возврат ЗначениеВозврата;	
КонецФункции

Функция  ПолучитьКонтрагентаТам(Коннектор, Контрагент, Организация, СообщениеОбОшибке)
	Перем ЗначениеВозврата;
	Контрагент_СпрЗдесь = Контрагент;
	Если Контрагент_СпрЗдесь = Неопределено ИЛИ Контрагент_СпрЗдесь = Справочники.Контрагенты.ПустаяСсылка() тогда
		Возврат Коннектор.Справочники.Контрагенты.ПустаяСсылка();	
	КонецЕсли;
		
	//КонтрагентТам	=	Коннектор.Справочники.Контрагенты.НайтиПоНаименованию(Контрагент_СпрЗдесь.Наименование);
	Если Не ПустаяСтрока(Контрагент_СпрЗдесь.ИНН) Тогда		
		КонтрагентТам 	=	Коннектор.Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", Контрагент_СпрЗдесь.ИНН);
	Иначе
		КонтрагентТам 	=	Коннектор.Справочники.Контрагенты.НайтиПоНаименованию(Контрагент_СпрЗдесь.ПолноеНаименование, Истина);
	КонецЕсли;
	Если Не КонтрагентТам = Коннектор.Справочники.Контрагенты.ПустаяСсылка() тогда
		ПроверитьСоответствиеКонтактнойИнформации(Коннектор, Контрагент_СпрЗдесь, КонтрагентТам.Ссылка);
		Возврат КонтрагентТам;
	КонецЕсли;
	   					
	НовыйКонтрагентТАм	=	Коннектор.Справочники.Контрагенты.СоздатьЭлемент();	
	
	НовыйКонтрагентТАм.Наименование	=	Контрагент_СпрЗдесь.Наименование;
	НовыйКонтрагентТАм.ИНН			=	Контрагент_СпрЗдесь.ИНН;
	НовыйКонтрагентТАм.КПП			=	Контрагент_СпрЗдесь.КПП;
	
	Если Контрагент_СпрЗдесь.ЮрФизЛицо	=	Перечисления.ЮрФизЛицо.ФизЛицо тогда
		НовыйКонтрагентТАм.ЮрФизЛицо    =	Коннектор.Перечисления.ЮрФизЛицо.ФизЛицо;
	иначе
		НовыйКонтрагентТАм.ЮрФизЛицо    =	Коннектор.Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;  								
		
	НовыйКонтрагентТАм.НаименованиеПолное = Контрагент_СпрЗдесь.ПолноеНаименование;
				
	Попытка 
		НовыйКонтрагентТАм.Записать();
		ЗначениеВозврата = НовыйКонтрагентТАм.Ссылка;
	Исключение   
		Сообщить("Не удалось синхронизировать контрагента " + ОписаниеОшибки());	
	КонецПопытки;	
	
	Если Не ЗначениеВозврата = Неопределено Тогда
		ПроверитьСоответствиеКонтактнойИнформации(Коннектор, Контрагент_СпрЗдесь, НовыйКонтрагентТАм.Ссылка);
		СсылкаДоговор = ПолучитьДоговорТам(Коннектор, ЗначениеВозврата, Организация, СообщениеОбОшибке);
		НовыйКонтрагентТАм.ОсновнойДоговорКонтрагента = СсылкаДоговор;
		Попытка 
			НовыйКонтрагентТАм.Записать();
		Исключение   
			Сообщить("Не удалось привязать к контрагенту основной договор " + ОписаниеОшибки());	
		КонецПопытки;			
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
КонецФункции

Процедура ПроверитьСоответствиеКонтактнойИнформации(Коннектор, КонтрагентСсылкаЗдесь, КонтрагентСсылкаТам)
	
	Если Не ПустаяСтрока(КонтрагентСсылкаЗдесь.ЮридическийАдрес) Тогда
		ВидАдреса = Коннектор.Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ПроверитьИЗменитьАдресКонтрагента(Коннектор, ВидАдреса, КонтрагентСсылкаТам, КонтрагентСсылкаЗдесь.ЮридическийАдрес);
	КонецЕсли;
	Если Не ПустаяСтрока(КонтрагентСсылкаЗдесь.ФактическийАдрес) Тогда
		ВидАдреса = Коннектор.Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		ПроверитьИЗменитьАдресКонтрагента(Коннектор, ВидАдреса, КонтрагентСсылкаТам, КонтрагентСсылкаЗдесь.ФактическийАдрес);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьИЗменитьАдресКонтрагента(Коннектор, ВидАдресаТам, КонтрагентСсылкаТам, АдресПредставление)
	
	ТипАдреса = Коннектор.Перечисления.ТипыКонтактнойИнформации.Адрес;
	//ВидАдреса = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	//КонтрагентСсылка = Конрагент;
	//СтрокаАдреса = "Адрес";
	
	НаборЗаписей = Коннектор.РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(КонтрагентСсылкаТам);
	НаборЗаписей.Отбор.Тип.Установить(ТипАдреса);
	НаборЗаписей.Отбор.Вид.Установить(ВидАдресаТам);	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей.Получить(0);
	Иначе
		Запись = НаборЗаписей.Добавить();
		Запись.Объект = КонтрагентСсылкаТам; 
		Запись.Тип = ТипАдреса;
		Запись.Вид = ВидАдресаТам;
	КонецЕсли;
	Если НЕ СокрЛП(Запись.Представление) = СокрЛП(АдресПредставление) Тогда 
		Запись.Представление = АдресПредставление;
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры
Функция  ПолучитьДоговорТам(Коннектор, КонтрагентТам, Организация, СообщениеОбОшибке = "")
	Перем ЗначениеВозврата;
	
	НовыйДоговорТАм	=	Коннектор.Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();			
	НовыйДоговорТАм.Наименование			=	"Основной Договор(ПД)"; 
	НовыйДоговорТАм.Владелец				=	КонтрагентТам;
	НовыйДоговорТАм.ВалютаВзаиморасчетов	=	Коннектор.Справочники.Валюты.НайтиПоКоду(643);	
	НовыйДоговорТАм.Организация				=	Коннектор.Справочники.Организации.НайтиПоКоду(Организация.COMКодОрганизации);
	НовыйДоговорТАм.ВидДоговора				=	Коннектор.Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;			
	Попытка 
		НовыйДоговорТАм.Записать();
		ЗначениеВозврата = НовыйДоговорТАм.Ссылка; 
	Исключение   
		Сообщить("Не удалось создать договор контрагента для контрагента " + "Основной Договор(ПД)" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;	
	
	Возврат ЗначениеВозврата;
КонецФункции

Функция ПолучитьСуммаНДС(Коннектор, СтавкаНДС, Сумма)	
	ЗначениеВозврата = 0;	
	СтрокаставкаНДС = ПолучитьСтроковоеПредставлениеЗначенияПеречисленияОЛЕ(Коннектор, СтавкаНДС, "СтавкиНДС");
	
	Если СтрокаставкаНДС = "НДС18"   Тогда		
		ЗначениеВозврата = Сумма - Сумма/1.18;	
	ИначеЕсли СтрокаставкаНДС = "НДС10" Тогда
		ЗначениеВозврата = Сумма - Сумма/1.10;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
КонецФункции

Функция ПолучитьСтроковоеПредставлениеЗначенияПеречисленияОЛЕ(Коннектор, ЗначениеПеречисленияОЛЕ, СтрокаНазваниеПеречисления)
	Возврат Коннектор.Метаданные.Перечисления[СтрокаНазваниеПеречисления].EnumValues.Get(Коннектор.Перечисления[СтрокаНазваниеПеречисления].Индекс(ЗначениеПеречисленияОЛЕ)).Name;
КонецФункции

Функция ПолучитьИмяЗначенияПеречисления(Ссылка) Экспорт

	ИмяПеречисления = Ссылка.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);

	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;

КонецФункции // ПолучитьИмяЗначенияПеречисления()

Функция ПолучитьОбработкуПечати(Коннектор = Неопределено, ВременныйКаталог, ИмяОбработки = Неопределено, ссылкаДокумент, СуффиксФайла = "", ПоДоверенности = Неопределено) Экспорт 
	ИмяФайлаPDFдокумент = ВременныйКаталог + ИмяОбработки + СуффиксФайла + ".pdf";
	ИмяФайлОбработки = ПолучитьИмяВременногоФайла("epf");
	ДвоичныеДанные = ПолучитьОбщийМакет("Макет" + ИмяОбработки);
	ДвоичныеДанные.Записать(ИмяФайлОбработки);
	//Коннектор.УстановитьБезопасныйРежим(Ложь);
	ОбработкаПечати = Коннектор.ВнешниеОбработки.Создать(ИмяФайлОбработки, Ложь);
	ОбработкаПечати.СсылкаНаОбъект = ссылкаДокумент; 
	//Если ИмяОбработки = "СчетФактура" Тогда		
	ТабДок = ОбработкаПечати.Печать(ПоДоверенности);
	//Иначе
	//	ТабДок = ОбработкаПечати.Печать();
	//КонецЕсли;
	
	//ТабДок.АвтоМасштаб = Истина;
	УдалитьФайлы(ИмяФайлОбработки);
	Если ИмяОбработки = "РТУ" Тогда
		стрВозврат = Новый Структура;
		Если ТабДок.Свойство("Акт") Тогда
			ИмяФайла = ВременныйКаталог + "Акт" + СуффиксФайла + ".pdf"; 			
			ТабДок.Акт.Записать(ИмяФайла, Коннектор.ТипФайлаТабличногоДокумента.PDF);	
			стрВозврат.Вставить("Акт", ИмяФайла);
		КонецЕсли;
		Если ТабДок.Свойство("Торг12") Тогда
			ИмяФайла = ВременныйКаталог + "Торг12" + СуффиксФайла + ".pdf"; 			
			ТабДок.Торг12.Записать(ИмяФайла, Коннектор.ТипФайлаТабличногоДокумента.PDF);	
			стрВозврат.Вставить("Торг12", ИмяФайла);
		КонецЕсли;	
		ИмяФайлаPDFдокумент = стрВозврат; 
	Иначе
		ТабДок.Записать(ИмяФайлаPDFдокумент, Коннектор.ТипФайлаТабличногоДокумента.PDF);
	КонецЕсли;	
	Возврат ИмяФайлаPDFдокумент;	
КонецФункции

Функция СформироватьФайлыДокументов(Коннектор, стрПараметры, СуффикФайла = "") Экспорт 
	Перем стрПоДоверенности;
	стрВозврат = Новый Структура;
	ВременныйКаталог = КаталогВременныхФайлов();
	Если стрПараметры.Свойство("ПоДоверенности") Тогда
		стрПоДоверенности = стрПараметры.ПоДоверенности 
	КонецЕсли;	
	Если стрПараметры.Свойство("СчетНаОплату") Тогда	
		стрВозврат.Вставить("СчетНаОплату", ПолучитьОбработкуПечати(Коннектор, ВременныйКаталог, "СчетНаОплату", стрПараметры.СчетНаОплату, СуффикФайла, стрПоДоверенности));
	КонецЕсли;
	Если стрПараметры.Свойство("РТУ") Тогда	 
		стрВозврат.Вставить("РеализацияТоваровУслуг", ПолучитьОбработкуПечати(Коннектор, ВременныйКаталог, "РТУ", стрПараметры.РТУ, СуффикФайла, стрПоДоверенности));
	КонецЕсли;
	//Если стрПараметры.Свойство("ТоварнаяНакладная") Тогда	
	//	стрВозврат.Вставить("РеализацияТоваровУслуг", ПолучитьОбработкуПечати(Коннектор, ВременныйКаталог, "Торг12", стрПараметры.РТУ, СуффикФайла));
	//КонецЕсли;
	Если стрПараметры.Свойство("СФ") Тогда	
		стрВозврат.Вставить("СчетФактураВыданный", ПолучитьОбработкуПечати(Коннектор, ВременныйКаталог, "СчетФактура", стрПараметры.СФ, СуффикФайла, стрПоДоверенности));
	КонецЕсли;
	
	Возврат стрВозврат; 
КонецФункции

Функция ПредставлениеМесяцаПоНомеру(НомерМесяца)
	Перем ЗначениеВозврата;
	Если НомерМесяца = 1 Тогда
		ЗначениеВозврата = "Январь";		
	ИначеЕсли НомерМесяца = 2 Тогда
		ЗначениеВозврата = "Февраль";		
	ИначеЕсли НомерМесяца = 3  Тогда
		ЗначениеВозврата = "Март";		
	ИначеЕсли НомерМесяца = 4 Тогда
		ЗначениеВозврата = "Апрель";		
	ИначеЕсли НомерМесяца = 5 Тогда
		ЗначениеВозврата = "Май";		
	ИначеЕсли НомерМесяца = 6 Тогда
		ЗначениеВозврата = "Июнь";		
	ИначеЕсли НомерМесяца = 7 Тогда
		ЗначениеВозврата = "Июль";		
	ИначеЕсли НомерМесяца = 8 Тогда
		ЗначениеВозврата = "Август";		
	ИначеЕсли НомерМесяца = 9 Тогда
		ЗначениеВозврата = "Сентябрь";		
	ИначеЕсли НомерМесяца = 10 Тогда
		ЗначениеВозврата = "Октябрь";		
	ИначеЕсли НомерМесяца = 11 Тогда
		ЗначениеВозврата = "Ноябрь";		
	ИначеЕсли НомерМесяца = 12 Тогда
		ЗначениеВозврата = "Декабрь";		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
КонецФункции

Функция СформироватьШаблоныАвтозамены(ТекДата)
	СоответствиеДляЗамены = Новый Соответствие;
	СоответствиеДляЗамены.Вставить("%ПериодОбслуживания%", ПредставлениеМесяцаПоНомеру(Месяц(ТекДата)) + Формат(ТекДата, "ДФ=' yyyy'")); 	
	
	
	Возврат СоответствиеДляЗамены;	
КонецФункции

Функция СформироватьОписаниеУслуги(ТексУслуги, Период) Экспорт 
	//%ПериодОбслуживания%
	ИтоговаяСтрока = ТексУслуги; 
	СоответствиеДляЗамены = СформироватьШаблоныАвтозамены(Период);
	Для Каждого ЭлементЗамены ИЗ СоответствиеДляЗамены Цикл 
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, ЭлементЗамены.Ключ, ЭлементЗамены.Значение); 	
		
	КонецЦикла;
	Возврат ИтоговаяСтрока;
КонецФункции