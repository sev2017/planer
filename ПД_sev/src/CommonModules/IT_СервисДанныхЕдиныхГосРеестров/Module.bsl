
// Возвращаются реквизиты юридического лица по данным ЕГРЮЛ (наименование, адрес, коды и т.д.)
//
// Параметры:
//  ИНН  - Строка - ИНН юридического лица, реквизиты которого надо получить
//
// Возвращаемое значение:
//   Структура   - реквизиты юридического лица. 
//                 Содержание структуры - см. функцию НовыеРеквизитыЮридическогоЛица
//
Функция РеквизитыЮрЛицаПоИНН(Знач ИНН) Экспорт
	
	РеквизитыЮридическогоЛица = НовыеРеквизитыЮридическогоЛица();
	РеквизитыЮридическогоЛица.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getCorporationRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ = Прокси.getCorporationRequisitesByINN(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыЮрЛица;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;

	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "getCorporationRequisitesByINN", РеквизитыЮридическогоЛица);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат РеквизитыЮридическогоЛица;
	КонецЕсли;
		
	ЗаполнитьНаименованияЮрЛица(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	РеквизитыЮридическогоЛица.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	РеквизитыЮридическогоЛица.КПП = ОбъектXDTO.КПП;
	
	РеквизитыЮридическогоЛица.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыЮридическогоЛица, Прокси.ФабрикаXDTO);

	ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыЮридическогоЛица);
	
	Возврат РеквизитыЮридическогоЛица;
	
КонецФункции

// Возвращаются реквизиты индивидуального предпринимателя по данным ЕГРИП (ФИО, свидетельство о регистрации, коды и т.д.)
//
// Параметры:
//  ИНН  - Строка - ИНН индивидуального предпринимателя, реквизиты которого надо получить
//
// Возвращаемое значение:
//   Структура   - реквизиты индивидуального предпринимателя. 
//                 Содержание структуры - см. функцию НовыеРеквизитыПредпринимателя
//
Функция РеквизитыПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	РеквизитыПредпринимателя = НовыеРеквизитыПредпринимателя();
	РеквизитыПредпринимателя.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getEntrepreneurRequisitesByINN"));
		ВходныеПараметры.INN = ИНН;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ = Прокси.getEntrepreneurRequisitesByINN(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыИП;	
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, "getEntrepreneurRequisitesByINN", РеквизитыПредпринимателя);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат РеквизитыПредпринимателя;
	КонецЕсли;
		
	РеквизитыПредпринимателя.Фамилия  = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Фамилия);
	РеквизитыПредпринимателя.Имя      = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Имя);
	РеквизитыПредпринимателя.Отчество = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Отчество);
	РеквизитыПредпринимателя.Пол      = ?(ОбъектXDTO.СвФЛ.Пол = "2", 
		Перечисления.ПолФизическихЛиц.Женский, 
		Перечисления.ПолФизическихЛиц.Мужской);
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, РеквизитыПредпринимателя);
	
	РеквизитыПредпринимателя.Наименование = РеквизитыПредпринимателя.Фамилия 
		+ " " + РеквизитыПредпринимателя.Имя
		+ " " + РеквизитыПредпринимателя.Отчество;
	РеквизитыПредпринимателя.НаименованиеПолное = ОбъектXDTO.НаимВидИП
		+ " " + РеквизитыПредпринимателя.Фамилия 
		+ " " + РеквизитыПредпринимателя.Имя
		+ " " + РеквизитыПредпринимателя.Отчество;
	РеквизитыПредпринимателя.НаименованиеСокращенное = ?(ОбъектXDTO.КодВидИП = "1", "ИП ", "") 
		+ РеквизитыПредпринимателя.Наименование;
		
	РеквизитыПредпринимателя.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	
	Если ОбъектXDTO.СвГражд <> Неопределено Тогда
		РеквизитыПредпринимателя.КодСтраныГражданства = ОбъектXDTO.СвГражд.ОКСМ;
	КонецЕсли;
	
	Если ОбъектXDTO.СвРегИП <> Неопределено Тогда
		РеквизитыПредпринимателя.ДатаРегистрации = ОбъектXDTO.СвРегИП.ДатаРег;
	КонецЕсли;
	
	Возврат РеквизитыПредпринимателя;
	
КонецФункции

// Возвращаются основные реквизиты юридических лиц по данным ЕГРЮЛ, подходящих по условиям поиска по наименованию
//
// Параметры:
//  Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ
//  КодРегиона - Строка, 2 - код региона в адресе юр.лица для поиска в ЕГРЮЛ
//  Адрес - Строка - одно или несколько слов из юридического адреса юридического лица (от региона до улицы) для поиска в ЕГРЮЛ
//
// Возвращаемое значение:
//   Структура   - реквизиты найденных юридических лиц. Содержание структуры: 
//                 * РеквизитыЮрЛиц - Массив - реквизиты найденных юр.лиц, элементы массива - Структура, описание см. функцию НовыеРеквизитыЮридическогоЛица
//                 заполняются только основные реквизиты (ИНН, наименование, юр.адрес, ФИО руководителя)
//                 если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20
//                 * КоличествоНайденных - Число - общее количество найденных реквизитов (может быть больше 20)
//                 * ОписаниеОшибки - Строка - служебный реквизит
//
Функция РеквизитыЮрЛицПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	РеквизитыЮрЛиц = Новый Структура("РеквизитыЮрЛиц,КоличествоНайденных,ОписаниеОшибки",
		Новый Массив, 0, Неопределено);
	
	ОписаниеОшибки = "";
	Прокси = ПроксиСервиса(ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПространствоИмен(), "getCorporationRequisitesByNameAndAddress"));
		ВходныеПараметры.name = Наименование;
		ВходныеПараметры.address = Адрес;
		ВходныеПараметры.regionCode = КодРегиона;
		ВходныеПараметры.configurationName = Метаданные.Имя;
		Попытка
			Ответ = Прокси.getCorporationRequisitesByNameAndAddress(ВходныеПараметры);
			СписокXDTO = ?(Ответ.CorporationSearchResult = Неопределено
							, Неопределено
							, Ответ.CorporationSearchResult.РеквизитыЮрЛица);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru='Наименование -  %1:'"), Наименование)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
	КонецЕсли;

	ОбработатьОшибкуСервиса(СписокXDTO, ОписаниеОшибки, "getCorporationRequisitesByNameAndAddress", РеквизитыЮрЛиц);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат РеквизитыЮрЛиц;
	КонецЕсли;
	
	Для каждого ОбъектXDTO Из Ответ.CorporationSearchResult.РеквизитыЮрЛица Цикл
		
		РеквизитыЮрЛица     = НовыеРеквизитыЮридическогоЛица();
		РеквизитыЮрЛица.ИНН = ОбъектXDTO.ИНН;
		
		ЗаполнитьНаименованияЮрЛица(ОбъектXDTO, РеквизитыЮрЛица);
		
		ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыЮрЛица, Прокси.ФабрикаXDTO);
		
		ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыЮрЛица);
		
		РеквизитыЮрЛиц.РеквизитыЮрЛиц.Добавить(РеквизитыЮрЛица);
		
	КонецЦикла; 
		
	РеквизитыЮрЛиц.КоличествоНайденных = Ответ.CorporationSearchResult.corporationsFound;
		
	Возврат РеквизитыЮрЛиц;
	
КонецФункции

Процедура ПреобразоватьКонтактнуюИнформацию(СтрокаНабора, КонтактнаяИнформация) Экспорт
	
	СтруктураПолейКИ = ПредыдущаяСтруктураКонтактнойИнформацииXML(КонтактнаяИнформация, СтрокаНабора.Вид);
	
	ТипыДомов = Новый Массив;
	ТипыДомов.Добавить("дом");
	ТипыДомов.Добавить("владение");
	
	ТипыКорпусов = Новый Массив;
	ТипыКорпусов.Добавить("корпус");
	ТипыКорпусов.Добавить("строение");
	
	ТипыКвартир = Новый Массив;
	ТипыКвартир.Добавить("офис");
	ТипыКвартир.Добавить("квартира");

	Если СтрокаНабора.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		СтруктураПолейКИ.Свойство("КодСтраны", СтрокаНабора.Поле1);
		СтруктураПолейКИ.Свойство("КодГорода", СтрокаНабора.Поле2);
		СтруктураПолейКИ.Свойство("НомерТелефона", СтрокаНабора.Поле3);
		СтруктураПолейКИ.Свойство("Добавочный", СтрокаНабора.Поле4);
	ИначеЕсли СтрокаНабора.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		СтруктураПолейКИ.Свойство("Индекс", СтрокаНабора.Поле1);
		СтруктураПолейКИ.Свойство("Регион", СтрокаНабора.Поле2);
		СтруктураПолейКИ.Свойство("Район", СтрокаНабора.Поле3);
		СтруктураПолейКИ.Свойство("Город", СтрокаНабора.Поле4);
		СтруктураПолейКИ.Свойство("НаселенныйПункт", СтрокаНабора.Поле5);
		СтруктураПолейКИ.Свойство("Улица", СтрокаНабора.Поле6);
		СтруктураПолейКИ.Свойство("Дом", СтрокаНабора.Поле7);
		СтруктураПолейКИ.Свойство("Корпус", СтрокаНабора.Поле8);
		СтруктураПолейКИ.Свойство("Квартира", СтрокаНабора.Поле9);
		
		СтруктураПолейКИ.Свойство("ТипДома", СтрокаНабора.ТипДома);
		СтрокаНабора.ТипДома = ?(ТипыДомов.Найти(НРег(СтрокаНабора.ТипДома)) = Неопределено, Неопределено, СтрокаНабора.ТипДома);
		
		СтруктураПолейКИ.Свойство("ТипКорпуса", СтрокаНабора.ТипКорпуса);
		СтрокаНабора.ТипКорпуса = ?(ТипыКорпусов.Найти(НРег(СтрокаНабора.ТипКорпуса)) = Неопределено, Неопределено, СтрокаНабора.ТипКорпуса);
		
		СтруктураПолейКИ.Свойство("ТипКвартиры", СтрокаНабора.ТипКвартиры);
		Если СтрокаНабора.ТипКвартиры = "кв." Тогда
			СтрокаНабора.ТипКвартиры = "Квартира";
		ИначеЕсли СтрокаНабора.ТипКвартиры = "оф." Тогда
			СтрокаНабора.ТипКвартиры = "Офис";
		КонецЕсли;
		СтрокаНабора.ТипКвартиры = ?(ТипыКвартир.Найти(НРег(СтрокаНабора.ТипКвартиры)) = Неопределено, Неопределено, СтрокаНабора.ТипКвартиры);
		
	КонецЕсли;
	
	СтруктураПолейКИ.Свойство("Комментарий", СтрокаНабора.Комментарий);

КонецПроцедуры

Процедура ЗаполнитьЭлементКонтактнойИнформации(НаборЗаписей, СтруктураДанных, ВидКонтактнойИнформации) Экспорт
	
	ТЗ = НаборЗаписей.Выгрузить();
	СтрокаТЗ = ТЗ.Найти(ВидКонтактнойИнформации, "Вид");
	
	Если СтруктураДанных <> Неопределено Тогда
		Если СтрокаТЗ <> Неопределено Тогда
			Индекс = ТЗ.Индекс(СтрокаТЗ);
			Запись = НаборЗаписей.Получить(Индекс);
		Иначе
			Запись = НаборЗаписей.Добавить();
		КонецЕсли;
		Запись.Тип = ВидКонтактнойИнформации.Тип;
		Запись.Вид = ВидКонтактнойИнформации;
		Запись.Представление = СтруктураДанных.Представление;
		ПреобразоватьКонтактнуюИнформацию(Запись, СтруктураДанных.КонтактнаяИнформация);
	Иначе
		Если СтрокаТЗ <> Неопределено Тогда
			Индекс = ТЗ.Индекс(СтрокаТЗ);
			Запись = НаборЗаписей.Получить(Индекс);
			Для Сч = 1 По 10 Цикл
				Запись["Поле"+Строка(Сч)] = "";
			КонецЦикла;
			Запись.Представление = "";
			Запись.Комментарий = "";
			Запись.ЗначениеПоУмолчанию = Ложь;
			Запись.ТипДома     = Перечисления.ТипыДомов.ПустаяСсылка();
			Запись.ТипКорпуса  = Перечисления.ТипыКорпусов.ПустаяСсылка();
			Запись.ТипКвартиры = Перечисления.ТипыКвартир.ПустаяСсылка();
		КонецЕсли
	КонецЕсли;

КонецПроцедуры

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыЮрЛица = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ
	
	РеквизитыЮрЛица.Вставить("ИНН");                         // Строка, 10
	РеквизитыЮрЛица.Вставить("КПП");                         // Строка, 9
	РеквизитыЮрЛица.Вставить("Наименование");                // Строка, 0
	РеквизитыЮрЛица.Вставить("НаименованиеПолное");          // Строка, 0
	РеквизитыЮрЛица.Вставить("НаименованиеСокращенное");     // Строка, 0
	РеквизитыЮрЛица.Вставить("РегистрационныйНомер");        // Строка, 13 - ОГРН
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных
	РеквизитыЮрЛица.Вставить("ПравоваяФорма");               // Строка, 0
	РеквизитыЮрЛица.Вставить("ЮридическийАдрес");            // Структура из НоваяКонтактнаяИнформация()
	РеквизитыЮрЛица.Вставить("Телефон");                     // Структура из НоваяКонтактнаяИнформация()
	РеквизитыЮрЛица.Вставить("Руководитель");                // Структура из НовоеКонтактноеЛицо()
	РеквизитыЮрЛица.Вставить("РегистрацияВНалоговомОргане"); // Структура из НоваяРегистрацияВНалоговомОргане()
	РеквизитыЮрЛица.Вставить("ДатаРегистрации");             // Дата
	РеквизитыЮрЛица.Вставить("РегистрацияВПенсионномФонде"); // Структура из НоваяРегистрацияВПенсионномФонде()
	РеквизитыЮрЛица.Вставить("РегистрацияВФСС");             // Структура из НоваяРегистрацияВФСС()
	РеквизитыЮрЛица.Вставить("КодОКВЭД");                    // Строка, 8
	
	// Служебный реквизит
	РеквизитыЮрЛица.Вставить("ОписаниеОшибки");              // Строка, 0
	
	Возврат РеквизитыЮрЛица;

КонецФункции 

Функция НовыеРеквизитыПредпринимателя()

	РеквизитыПредпринимателя = Новый Структура;
	
	// Заполняется на основе данных ЕГРИП
	
	РеквизитыПредпринимателя.Вставить("ИНН");                         // Строка, 12
	РеквизитыПредпринимателя.Вставить("Наименование");                // Строка, 0
	РеквизитыПредпринимателя.Вставить("НаименованиеПолное");          // Строка, 0
	РеквизитыПредпринимателя.Вставить("НаименованиеСокращенное");     // Строка, 0
	РеквизитыПредпринимателя.Вставить("Фамилия");                     // Строка, 0
	РеквизитыПредпринимателя.Вставить("Имя");                         // Строка, 0
	РеквизитыПредпринимателя.Вставить("Отчество");                    // Строка, 0
	РеквизитыПредпринимателя.Вставить("РегистрационныйНомер");        // Строка, 13 - ОГРН
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных
	РеквизитыПредпринимателя.Вставить("Пол");                         // ПеречислениеСсылка.ПолФизическогоЛица
	РеквизитыПредпринимателя.Вставить("КодСтраныГражданства");        // Строка, 3
	РеквизитыПредпринимателя.Вставить("РегистрацияВНалоговомОргане"); // Структура из НоваяРегистрацияВНалоговомОргане()
	РеквизитыПредпринимателя.Вставить("РегистрацияВПенсионномФонде"); // Структура из НоваяРегистрацияВПенсионномФонде()
	РеквизитыПредпринимателя.Вставить("РегистрацияВФСС");             // Структура из НоваяРегистрацияВФСС()
	РеквизитыПредпринимателя.Вставить("ДатаРегистрации");             // Дата
	РеквизитыПредпринимателя.Вставить("КодОКВЭД");                    // Строка, 8
	РеквизитыПредпринимателя.Вставить("СвидетельствоОРегистрации");   // Структура из НовоеСвидетельствоОРегистрации()
	
	// Служебный реквизит
	РеквизитыПредпринимателя.Вставить("ОписаниеОшибки");       // Строка, 0
	
	Возврат РеквизитыПредпринимателя;

КонецФункции 

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
	Возврат Результат;

КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность"); // Строка, 0
	Результат.Вставить("Фамилия");   // Строка, 0
	Результат.Вставить("Имя");       // Строка, 0
	Результат.Вставить("Отчество");  // Строка, 0
	Результат.Вставить("ИНН");       // Строка, 12
	Возврат Результат;

КонецФункции

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");          // Строка, 4
	Результат.Вставить("Наименование"); // Строка, 0
	Результат.Вставить("ОКТМО");        // Строка, 11
	Результат.Вставить("ОКАТО");        // Строка, 11
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР"); // Строка, 14
	Результат.Вставить("КодОрганаПФР");            // Строка, 7
	Результат.Вставить("НаименованиеОрганаПФР");   // Строка, 0
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС"); // Строка, 15
	Результат.Вставить("КодПодчиненности");        // Строка, 5
	Результат.Вставить("КодОрганаФСС");            // Строка, 4
	Результат.Вставить("НаименованиеОрганаФСС");   // Строка, 0
	Возврат Результат;
	
КонецФункции

Функция НовоеСвидетельствоОРегистрации()
	
	Результат = Новый Структура;
	Результат.Вставить("Серия");  // Строка, 0
	Результат.Вставить("Номер");  // Строка, 0
	Результат.Вставить("Дата");   // Дата
	Возврат Результат;
	
КонецФункции

Процедура ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(Объект, АдресныеСокращения = Неопределено)
	
	Если АдресныеСокращения = Неопределено Тогда
		АдресныеСокращения = СокращенияАдресныхОбъектов(Новый Массив);
	КонецЕсли;
	
	Для каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЗначениеСвойства = Объект[СвойствоОбъекта.Имя];
		Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
			МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСвойства, " ", Ложь);
			Для ИндексСлова = 0 По МассивСлов.ВГраница() Цикл
				Слово = ВРег(МассивСлов[ИндексСлова]);
				АдресноеСокращение = АдресныеСокращения[Слово];
				Если АдресноеСокращение <> Неопределено Тогда
					МассивСлов[ИндексСлова] = АдресноеСокращение;
				КонецЕсли;
			КонецЦикла;
			Объект[СвойствоОбъекта.Имя] = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивСлов, " ");
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ЗначениеСвойства, АдресныеСокращения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДополнительныеАдресныеЭлементы(Объект, Фабрика)
	
	Если Объект.Свойства().Получить("ДопАдрЭл") = Неопределено
		ИЛИ Объект.ДопАдрЭл = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НовыеЗначения = Новый ТаблицаЗначений;
	НовыеЗначения.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	НовыеЗначения.Колонки.Добавить("ТипЭлемента");
	НовыеЗначения.Колонки.Добавить("ТипНомера");
	ТипыАдресныхЭлементов = Новый СписокЗначений;
	Для каждого ТипОбъектовАдресации Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		ТипыАдресныхЭлементов.Добавить(ВРег(ТипОбъектовАдресации.Ключ), ТипОбъектовАдресации.Код);
	КонецЦикла;
	
	Для каждого АдресныйЭлемент Из Объект.ДопАдрЭл Цикл
		
		Если ТипЗнч(АдресныйЭлемент.Номер) <> Тип("ОбъектXDTO")
			ИЛИ НЕ ЗначениеЗаполнено(АдресныйЭлемент.Номер.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		КонецЗначения = Найти(АдресныйЭлемент.Номер.Значение, ";");
		Если КонецЗначения > 0 Тогда
			НовоеЗначение = СокрЛП(Сред(АдресныйЭлемент.Номер.Значение, КонецЗначения + 1));
			Если НЕ ПустаяСтрока(НовоеЗначение) Тогда
				НоваяСтрока = НовыеЗначения.Добавить();
				НоваяСтрока.Значение    = НовоеЗначение;
				НоваяСтрока.ТипЭлемента = АдресныйЭлемент.Тип();
				НоваяСтрока.ТипНомера   = АдресныйЭлемент.Номер.Тип();
				АдресныйЭлемент.Номер.Значение = Лев(АдресныйЭлемент.Номер.Значение, КонецЗначения - 1);
			КонецЕсли;
		КонецЕсли;
		
		КонецСлова = Найти(АдресныйЭлемент.Номер.Значение, ".");
		КонецСлова = ?(КонецСлова > 0, КонецСлова, Найти(АдресныйЭлемент.Номер.Значение, " "));
		Если КонецСлова > 0 Тогда
			ПервоеСловоЗначения = Лев(АдресныйЭлемент.Номер.Значение, КонецСлова - 1);
			Для каждого ТипАдресныхЭлементов Из ТипыАдресныхЭлементов Цикл
				Если Найти(ТипАдресныхЭлементов.Значение, ПервоеСловоЗначения) = 1 Тогда
					АдресныйЭлемент.Номер.Значение = СокрЛ(Сред(АдресныйЭлемент.Номер.Значение, КонецСлова + 1));
					АдресныйЭлемент.Номер.Тип      = ТипАдресныхЭлементов.Представление;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из НовыеЗначения Цикл
	
		КонецСлова = Найти(СтрокаТаблицы.Значение, ".");
		КонецСлова = ?(КонецСлова > 0, КонецСлова, Найти(СтрокаТаблицы.Значение, " "));
		Если КонецСлова > 0 Тогда
			ПервоеСловоЗначения = Лев(СтрокаТаблицы.Значение, КонецСлова - 1);
			Для каждого ТипАдресныхЭлементов Из ТипыАдресныхЭлементов Цикл
				Если Найти(ТипАдресныхЭлементов.Значение, ПервоеСловоЗначения) = 1 Тогда
					НовыйЭлемент = Фабрика.Создать(СтрокаТаблицы.ТипЭлемента);
					НовыйЭлемент.Номер = Фабрика.Создать(СтрокаТаблицы.ТипНомера);
					НовыйЭлемент.Номер.Значение = СокрЛ(Сред(СтрокаТаблицы.Значение, КонецСлова + 1));
					НовыйЭлемент.Номер.Тип      = ТипАдресныхЭлементов.Представление;
					Объект.ДопАдрЭл.Добавить(НовыйЭлемент);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованияЮрЛица(ОбъектXDTO, Реквизиты)

	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	Если ОбъектXDTO.СвНаимЮЛ.ОПФ <> Неопределено Тогда
		ПравоваяФормаОбъекта = Строка(ОбъектXDTO.СвНаимЮЛ.ОПФ.ПолнНаимОПФ);
		Реквизиты.ПравоваяФорма = ПравоваяФормаОбъекта;
		Если ПравовыеФормы.Найти(ПравоваяФормаОбъекта) = Неопределено Тогда
			ПравовыеФормы.Добавить(ПравоваяФормаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.НаименованиеПолное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛПолн;
	Для каждого ПравоваяФорма Из ПравовыеФормы Цикл
		Если ВРег(ПравоваяФорма) = ВРег(Лев(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
			Реквизиты.НаименованиеПолное = ПравоваяФорма + Сред(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.НаименованиеСокращенное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛСокр;
	Если НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеСокращенное) 
		ИЛИ Реквизиты.НаименованиеСокращенное = "-" Тогда
		Реквизиты.НаименованиеСокращенное = Реквизиты.НаименованиеПолное;
	КонецЕсли;
	
	Реквизиты.Наименование = Реквизиты.НаименованиеСокращенное;
	Поз = Найти(Реквизиты.Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Реквизиты.Наименование = СокрП(Сред(Реквизиты.Наименование, Поз)) + " " + СокрП(Лев(Реквизиты.Наименование, Поз-1));
		Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, """", "");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Объект, ИсходныйОбъект)
	
	Для каждого СвойствоИсходногоОбъекта Из ИсходныйОбъект.Свойства() Цикл
		
		СвойствоОбъекта = Объект.Свойства().Получить(СвойствоИсходногоОбъекта.Имя);
		Если СвойствоОбъекта <> Неопределено Тогда
			
			ЗначениеСвойства = ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя];
			Если ЗначениеСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				
				Объект[СвойствоОбъекта.Имя] = Фабрика.Создать(СвойствоОбъекта.Тип);
				ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Объект[СвойствоОбъекта.Имя], ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя]);
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
				
				Для Каждого ИсходныйЭлемент Из ЗначениеСвойства Цикл
					
					Элемент = Фабрика.Создать(СвойствоОбъекта.Тип);
					ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Элемент, ИсходныйЭлемент);
					Объект[СвойствоОбъекта.Имя].Добавить(Элемент);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
				
				МассивСлов      = РазложитьСтрокуВМассивСлов(ЗначениеСвойства, " ");
				МаксИндексСлова = ?(МассивСлов.Количество() = 1, 0, МассивСлов.Количество() - 2);
				Для ИндексСлова = 0 По МаксИндексСлова Цикл
					МассивСлов[ИндексСлова] = ТРег(МассивСлов[ИндексСлова]);
				КонецЦикла;
				Объект[СвойствоОбъекта.Имя] = ПолучитьСтрокуИзМассиваПодстрок(МассивСлов, " ");
				
			Иначе
				
				Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУчетНО <> Неопределено
		И ОбъектXDTO.СвУчетНО.СвНО <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		
		Реквизиты.РегистрацияВНалоговомОргане.Код          = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
		Реквизиты.РегистрацияВНалоговомОргане.Наименование = ОбъектXDTO.СвУчетНО.СвНО.НаимНО;
		
		Если ОбъектXDTO.Свойства().Получить("СвАдрес") <> Неопределено // Адрес есть только у юр.лиц
			И ОбъектXDTO.СвАдрес <> Неопределено 
			И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
			
			Адрес = ОбъектXDTO.СвАдрес.Адрес;
			Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = Адрес.Состав.ОКТМО;
			Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = Адрес.Состав.ОКАТО;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭД(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		СписокОКВЭД = ОбъектXDTO.СвОКВЭД;
		КодОКВЭД  = "";
		ДатаОКВЭД = '00010101';
		Для Каждого ЭлементОКВЭД Из СписокОКВЭД Цикл
			Если ЭлементОКВЭД.ДатаНачДейств > ДатаОКВЭД
				И ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				ДатаОКВЭД = ЭлементОКВЭД.ДатаНачДейств;
				КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
			КонецЕсли;
		КонецЦикла;
		Реквизиты.КодОКВЭД = КодОКВЭД;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегПФ <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		
		РегистрационныйНомерПФР = ОбъектXDTO.СвРегПФ.РегНомПФ;
		РегистрационныйНомерПФР = ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
					Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
		РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
		Если ОбъектXDTO.СвРегПФ.СвОргПФ <> Неопределено Тогда
			КодОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.КодПФ;
			КодОрганаПФР = ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(КодОрганаПФР, 3), Прав(КодОрганаПФР, 3));
			РегистрацияВПФР.КодОрганаПФР          = КодОрганаПФР;
			РегистрацияВПФР.НаименованиеОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.НаимПФ;
		КонецЕсли;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегФСС <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		
		Если СтрДлина(ОбъектXDTO.СвРегФСС.РегНомФСС) <= 10 Тогда
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(ОбъектXDTO.СвРегФСС.РегНомФСС);
			РегистрацияВФСС.КодПодчиненности        = "";
		Иначе
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(ОбъектXDTO.СвРегФСС.РегНомФСС, 10));
			РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(ОбъектXDTO.СвРегФСС.РегНомФСС, 11));
			Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
				РегистрацияВФСС.КодПодчиненности = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTO.СвРегФСС.СвОргФСС <> Неопределено Тогда
			РегистрацияВФСС.КодОрганаФСС            = ОбъектXDTO.СвРегФСС.СвОргФСС.КодФСС;
			РегистрацияВФСС.НаименованиеОрганаФСС   = ОбъектXDTO.СвРегФСС.СвОргФСС.НаимФСС;
		КонецЕсли;
		
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвЗапДейств <> Неопределено Тогда
		
		Свидетельство = НовоеСвидетельствоОРегистрации();
		Свидетельство.Дата = '00010101';
		Для Каждого Запись Из ОбъектXDTO.СвЗапДейств Цикл
			Для Каждого ЗаписьСвидетельства Из Запись.СвСвид Цикл
				Если ЗаписьСвидетельства.ДатаЗап = Неопределено Тогда
					ЗаписьСвидетельства.ДатаЗап = '00010101';
				КонецЕсли;
				Если ЗаписьСвидетельства.ДатаЗап > Свидетельство.Дата Тогда
					Свидетельство.Дата  = ЗаписьСвидетельства.ДатаЗап;
					Свидетельство.Серия = ЗаписьСвидетельства.Серия;
					Свидетельство.Номер = ЗаписьСвидетельства.Номер;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Свидетельство.Дата > '00010101' Тогда
			Реквизиты.СвидетельствоОРегистрации = Свидетельство;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическийАдрес(ОбъектXDTO, Реквизиты, Фабрика)
	
	ПространствоИменКИ = ПространствоИменКИ();
	
	Если ОбъектXDTO.СвАдрес <> Неопределено 
		И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
		
		АдресРФ_КИ         = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "АдресРФ"));
		ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ОбъектXDTO.СвАдрес.Адрес.Состав);
		ПроверитьДополнительныеАдресныеЭлементы(ОбъектXDTO.СвАдрес.Адрес.Состав, Фабрика);
		ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, ОбъектXDTO.СвАдрес.Адрес.Состав);
		
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
		КИ.Состав.Страна = ОбъектXDTO.СвАдрес.Адрес.Страна;
		КИ.Состав.Состав = АдресРФ_КИ;
		
		ВидИнформации = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", 
			Перечисления.ТипыКонтактнойИнформации.Адрес, Ложь, "КЛАДР");
		КИ.Представление = СформироватьПредставлениеКонтактнойИнформации(КИ, ВидИнформации);
		
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация = СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление  = КИ.Представление;
		
		Реквизиты.ЮридическийАдрес = СтруктураКИ;
		
	КонецЕсли;
	
КонецПроцедуры
Процедура ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, Реквизиты)
	
	ПространствоИменКИ = ПространствоИменКИ();
	
	Если ОбъектXDTO.СвУправлДеят <> Неопределено
		И ОбъектXDTO.СвУправлДеят.СведДолжнФЛ <> Неопределено Тогда
		
		Для каждого СведенияОДолжности Из ОбъектXDTO.СвУправлДеят.СведДолжнФЛ Цикл
			Если Найти(ВРЕГ(СведенияОДолжности.НаимВидДолжн), "РУКОВОДИТЕЛЬ") > 0 
				И СведенияОДолжности.ФИО <> Неопределено Тогда
				
				// Руководитель
				СтруктураКИ = НовоеКонтактноеЛицо();
				СтруктураКИ.Фамилия    = ТРег(СведенияОДолжности.ФИО.Фамилия);
				СтруктураКИ.Имя        = ТРег(СведенияОДолжности.ФИО.Имя);
				СтруктураКИ.Отчество   = ТРег(СведенияОДолжности.ФИО.Отчество);
				СтруктураКИ.Должность  = ПредложениеСЗаглавнойБуквы(СведенияОДолжности.НаимДолжн);
				СтруктураКИ.ИНН        = СведенияОДолжности.ИННФл;
				
				Реквизиты.Руководитель = СтруктураКИ;
				
				// Номер телефона
				Если ЗначениеЗаполнено(СведенияОДолжности.НомТел) Тогда
					КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
					КИ.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "НомерТелефона"));
					Если Лев(СведенияОДолжности.НомТел, 1) = "(" Тогда
						КонецКодаГорода     = Найти(СведенияОДолжности.НомТел, ")");
						КИ.Состав.КодГорода = Сред(СведенияОДолжности.НомТел, 2, КонецКодаГорода - 2);
						КИ.Состав.Номер     = Сред(СведенияОДолжности.НомТел, КонецКодаГорода + 1);
					Иначе
						КИ.Состав.Номер     = СведенияОДолжности.НомТел;
					КонецЕсли;
					
					ВидИнформации = Новый Структура("Тип,ВключатьСтрануВПредставление,ФорматАдреса", 
						Перечисления.ТипыКонтактнойИнформации.Телефон, Ложь, "КЛАДР");
					КИ.Представление = СформироватьПредставлениеКонтактнойИнформации(КИ, ВидИнформации);
					СтруктураКИ = НоваяКонтактнаяИнформация();
					СтруктураКИ.КонтактнаяИнформация = СериализацияОбъектаXDTO(КИ);
					СтруктураКИ.Представление = КИ.Представление;
					
					Реквизиты.Телефон         = СтруктураКИ;
					
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредложениеСЗаглавнойБуквы(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат ВРег(Лев(Строка, 1)) + НРег(Сред(Строка, 2))
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция ПроксиСервиса(ОписаниеОшибки)
	
	Прокси = Неопределено;
	ПараметрыАутентификации = ПараметрыАутентификацииВСервисе();
	
	Если ПараметрыАутентификации = Неопределено Тогда
		
		// Служебный текст. Должен быть обработан на клиенте.
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации"; 
		
	Иначе
		
		Попытка
			Прокси = WSПрокси(
				АдресСервиса(),                             		// АдресWSDL
				ПространствоИмен(),                         		// URIПространстваИмен
				"RequisitesWebServiceEndpointImpl7Service", 		// ИмяСервиса
				"RequisitesWebServiceEndpointImpl7ServiceSoap",		// ИмяТочкиПодключения
				ПараметрыАутентификации.login,              		// ИмяПользователя
				ПараметрыАутентификации.password,           		// Пароль
				30);                                        		// Таймаут
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки; 
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Функция возвращает объект WSПрокси созданный с переданными параметрами.
//
// Параметры соответствуют конструктору объекта WSПрокси.
//
Функция WSПрокси(Знач АдресWSDL, Знач URIПространстваИмен, Знач ИмяСервиса,
	Знач ИмяТочкиПодключения = "", Знач ИмяПользователя = "", Знач Пароль = "", Знач Таймаут = Неопределено) Экспорт
	
	Параметры = Новый Массив;
	Параметры.Добавить(АдресWSDL);
	Параметры.Добавить(ИмяПользователя);
	Параметры.Добавить(Пароль);
	Параметры.Добавить(Таймаут);
		
	WSОпределения = Новый(Тип("WSОпределения"), Параметры);
	
	Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
		ИмяТочкиПодключения = ИмяСервиса + "Soap";
	КонецЕсли;
	
	Параметры = Новый Массив;
	Параметры.Добавить(WSОпределения);
	Параметры.Добавить(URIПространстваИмен);
	Параметры.Добавить(ИмяСервиса);
	Параметры.Добавить(ИмяТочкиПодключения);
	Параметры.Добавить(Таймаут);
	
	Прокси = Новый(Тип("WSПрокси"), Параметры);
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

Функция ПараметрыАутентификацииВСервисе()
	
	Логин  = Константы.IT_ИнтернетПоддержкаЛогин.Получить();
	Пароль = Константы.IT_ИнтернетПоддержкаПароль.Получить();
	Если ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль) Тогда
		Возврат Новый Структура("login,password", 
			Логин, Пароль);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция АдресСервиса(РежимРегистрации=Ложь)

	Если РежимРегистрации Тогда
		Возврат "http://v8egrservice.its22.ru/manage/api.1cws?wsdl";
	Иначе
		Возврат "http://v8egrservice.its22.ru/service/api.1cws?wsdl";
	КонецЕсли;
	
КонецФункции

Функция ИмяСервиса(РежимРегистрации=Ложь)
	
	Если РежимРегистрации Тогда
		Возврат "ManageService";
	Иначе
		Возврат "RequisitesWebServiceEndpointImpl7Service";
	КонецЕсли;
	
КонецФункции

Функция ЗарегистрироватьОбновитьПользователя() Экспорт
	
	Логин  = Константы.IT_ИнтернетПоддержкаЛогин.Получить();
	Пароль = Константы.IT_ИнтернетПоддержкаПароль.Получить();
	ПинКод = Константы.IT_ИнтернетПоддержкаПинКод.Получить();
	
	Если НЕ (ЗначениеЗаполнено(Логин) И ЗначениеЗаполнено(Пароль) И ЗначениеЗаполнено(ПинКод)) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Попытка
		Прокси = WSПрокси(
			АдресСервиса(Истина),                       // АдресWSDL
			ПространствоИмен(Истина),					// URIПространстваИмен
			ИмяСервиса(Истина) 							// ИмяСервиса
							);
							
		Возврат Прокси.RegisterUpdateUser(Логин, Пароль, ПинКод);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции

Функция ПространствоИмен(РежимРегистрации = Ложь)

	Если РежимРегистрации Тогда
		Возврат "http://v8egrservice.its22.ru/manage";
	Иначе
		Возврат "http://ws.orgregister.company1c.com/";
	КонецЕсли;

КонецФункции

Процедура ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, ИмяМетода, СтруктураРеквизитов)
	
	Если ОбъектXDTO <> Неопределено
		И НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка  = "ru"; // Для записи события в журнал регистрации
	ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
	ТекстОшибки        = "";
	
	Если ОписаниеОшибкиВРег = ВРег("НеУказаныПараметрыАутентификации") Тогда

		ТекстОшибки    = "НеУказаныПараметрыАутентификации"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не указаны логин и пароль для доступа к интернет-поддержке'");
		
	ИначеЕсли ОписаниеОшибкиВРег = ВРег("НеУказанПароль") Тогда
		
		ТекстОшибки    = "НеУказанПароль"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не указан пароль для доступа к интернет-поддержке'");
		
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "SERVER-11:") > 0 
		ИЛИ Найти(ОписаниеОшибкиВРег, "SERVER-12:") > 0 Тогда
		
		ТекстОшибки    = "Сервис1СКонтрагентНеПодключен"; // Служебный текст. Должен быть обработан на клиенте.
		ТекстСобытия   = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ОписаниеОшибки = НСтр("ru='Не подключен сервис 1С:Контрагент'");
		
	ИначеЕсли Найти(ОписаниеОшибкиВРег, """STATUS"":401") > 0 
		ИЛИ Найти(ОписаниеОшибкиВРег, "SERVER-9:") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='Неверно указаны логин и пароль для доступа к интернет-поддержке'");

		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "SERVER-1:") > 0 Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН юридического лица'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН предпринимателя'");
		ИначеЕсли ИмяМетода = "getCorporationRequisitesByNameAndAddress" Тогда
			ТекстОшибки = НСтр("ru='Не указано наименование юридического лица'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='Не указан ИНН проверяемого лица'");	
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "SERVER-2:") > 0 Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='ИНН юридического лица должен состоять из 10 цифр'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН проверяемого лица должен состоять из 10 или 12 цифр'");
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "SERVER-3:") > 0 Тогда

		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки = НСтр("ru='ИНН юридического лица должен содержать только цифры'");
		ИначеЕсли ИмяМетода = "getEntrepreneurRequisitesByINN" 
			ИЛИ ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН предпринимателя должен содержать только цифры'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки = НСтр("ru='ИНН проверяемого лица должен содержать только цифры'");
		КонецЕсли;
		ТекстСобытия = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-7:") > 0 Тогда

		ТекстОшибки  = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		
	ИначеЕсли Найти(ОписаниеОшибки, "SERVER-8:") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='Отсутствует действующий договор ИТС'");
		ТекстСобытия = НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "ЗНАЧЕНИЕ ИНН НЕ СООТВЕТСТВУЕТ ФОРМАТУ! УБЕДИТЕСЬ В ПРАВИЛЬНОСТИ УКАЗАНИЯ ИНН") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='ИНН не найден или не соответствует формату!'");
		ТекстСобытия = НСтр("ru='Некорректный ИНН'", КодОсновногоЯзыка);
	ИначеЕсли Найти(ОписаниеОшибкиВРег, "НЕ УДАЛОСЬ НАЙТИ ДАННЫЕ ДЛЯ ЗАПОЛНЕНИЯ") > 0 Тогда
		
		ТекстОшибки  = НСтр("ru='По Данному ИНН не удалось найти данные для заполнения!'");
		ТекстСобытия = НСтр("ru='Не удалось найти ИНН'", КодОсновногоЯзыка);	
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ОписаниеОшибки)
		И ОбъектXDTO = Неопределено Тогда
		
		Если ИмяМетода = "getCorporationRequisitesByINN" 
			ИЛИ ИмяМетода = "getEntrepreneurRequisitesByINN" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "getCorporationRequisitesByNameAndAddress" Тогда
			ТекстОшибки  = НСтр("ru='Не удалось выполнить поиск по наименованию'");
		ИначеЕсли ИмяМетода = "getInspectionsByInn" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о проверках по ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "checkCorporationTrustability" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о юридическом лице с ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		ИначеЕсли ИмяМетода = "checkPersonTrustabilityByInn" Тогда
			ТекстОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о предпринимателе с ИНН %1'"),
				СтруктураРеквизитов.ИНН);
		КонецЕсли;
		ТекстСобытия   = НСтр("ru='Ошибка получения данных'", КодОсновногоЯзыка);
		ОписаниеОшибки = ТекстОшибки;	
	
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда // Неклассифицированная ошибка
		ТекстОшибки  = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ТекстСобытия = НСтр("ru='Ошибка при работе с сервисом'", КодОсновногоЯзыка);
	КонецЕсли;
	
	СтруктураРеквизитов.ОписаниеОшибки = ТекстОшибки;
	
	ИмяСобытия = НСтр("ru = 'Сервис данных единых гос_реестров.'", КодОсновногоЯзыка) + " " + ТекстСобытия;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
	
КонецПроцедуры

Функция СериализацияОбъектаXDTO(ОбъектXDTO) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	Если ОбъектXDTO <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

// Возвращает пространство имен для оперирования с XDTO контактной информации.
//
// Возвращаемое значение:
//      Строка - пространство имен.
//
Функция ПространствоИменКИ() Экспорт
	Возврат "http://www.v8.1c.ru/ssl/contactinfo";
КонецФункции

// Формирует и возвращает представление контактной информации.
//
// Параметры:
//   Информация    - ОбъектXDTO, Строка - контактная информация.
//   ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры для формирования представления.
//   ФорматАдреса  - Строка             - если указано "КЛАДР", то в представление адреса 
//                                        не включаются округ и внутригородской район.
//
// Возвращаемое значение:
//      Строка - сформированное представление.
//
Функция СформироватьПредставлениеКонтактнойИнформации(Информация, ВидИнформации) Экспорт
	
	Если ТипЗнч(Информация) = Тип("ОбъектXDTO") Тогда
		Если Информация.Состав = Неопределено Тогда
			Возврат Информация.Представление;
		КонецЕсли;
		
		ПространствоИмен = ПространствоИменКИ();
		ТипИнформации    = Информация.Состав.Тип();
		Если ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Возврат ПредставлениеАдреса(Информация.Состав, ВидИнформации);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат ПредставлениеТелефона(Информация.Состав);
			
		ИначеЕсли ТипИнформации = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		// Заглушка на другие типы
		Если ТипЗнч(ТипИнформации) = Тип("ОбъектXDTO") И ТипИнформации.Свойства.Получить("Значение") <> Неопределено Тогда
			Возврат Строка(Информация.Состав.Значение);
		КонецЕсли;
		
		Возврат Строка(Информация.Состав);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Формирует представление для адреса по правилу:
// 1) Страна, если надо.
// 2) Индекс, субъект рф, округ, район, город, внутригородской район, населенный пункт, улица.
// 3) Здания, помещения
//
Функция ПредставлениеАдреса(Знач XDTOАдрес, Знач ВидИнформации) Экспорт
	
	ПространствоИмен = ПространствоИменКИ();
	АдресРФ          = XDTOАдрес.Состав;
	Страна           = СокрЛП(XDTOАдрес.Страна);
	Если РоссийскийАдрес(АдресРФ) <> Неопределено Тогда
		
		// Это российский адрес, смотрим на настройки.
		Если Не ВидИнформации.ВключатьСтрануВПредставление Тогда
			Страна = "";
		КонецЕсли;
		
		// Значимые части
		Адрес = Новый Массив;
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, XPathПочтовогоИндекса()));
		Адрес.Добавить(АдресРФ.СубъектРФ);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.Округ);
		КонецЕсли;
		Адрес.Добавить(РайонАдреса(АдресРФ));
		Адрес.Добавить(АдресРФ.Город);
		Если ВидИнформации.ФорматАдреса = "ФИАС" Тогда
			Адрес.Добавить(АдресРФ.ВнутригРайон);
		КонецЕсли;
		Адрес.Добавить(АдресРФ.НаселПункт);
		Адрес.Добавить(АдресРФ.Улица);
		
		ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, XPathДополнительногоОбъектаАдресации(90, "СНТ"));
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, XPathДополнительногоОбъектаАдресации(90, "ГСК"));
		КонецЕсли;
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, XPathДополнительногоОбъектаАдресации(90, "ТЕР"));
		КонецЕсли;
		Если ДополнительныйЭлементАдреса = Неопределено Тогда
			ДополнительныйЭлементАдреса = ДополнительныйЭлементАдреса(АдресРФ, XPathДополнительногоОбъектаАдресации(90));
		КонецЕсли;
		
		Адрес.Добавить(ДополнительныйЭлементАдреса);
		Адрес.Добавить(ДополнительныйЭлементАдреса(АдресРФ, XPathДополнительногоОбъектаАдресации(91)));
		
		Представление = СформироватьПолноеНаименование(Адрес);
	
		// Строения и помещения
		НомерНеВыведен = Истина;
		Данные = ЗданияИПомещенияАдреса(АдресРФ);
		Для Каждого Строка Из Данные.Здания Цикл
			Здания = Новый Массив;
			Здания.Добавить(Представление); 
			Здания.Добавить(СокрЛП(Строка.Сокращение + ?(НомерНеВыведен, " № ", " ") + Строка.Значение));
			Представление =  СформироватьПолноеНаименование(Здания);
			НомерНеВыведен = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из Данные.Помещения Цикл
			Помещения = Новый Массив;
			Помещения.Добавить(Представление);
			Помещения.Добавить(СокрЛП(Строка.Сокращение + " " + Строка.Значение));
			Представление =  СформироватьПолноеНаименование(Помещения);
		КонецЦикла;
			
		// При пустом представлении страну нет смысла выводить.
		Если ПустаяСтрока(Представление) Тогда
			Страна = "";
		КонецЕсли;
	Иначе
		// Это иностранный адрес
		Представление = СокрЛП(АдресРФ);
	КонецЕсли;
	
	ДобавлениеСтраны = Новый Массив;
	ДобавлениеСтраны.Добавить(Страна);
	ДобавлениеСтраны.Добавить(Представление);
	Возврат СформироватьПолноеНаименование(ДобавлениеСтраны);
КонецФункции

// Формирует представление для телефона
//
Функция ПредставлениеТелефона(XDTOДанные) Экспорт
	
	Возврат СформироватьПредставлениеТелефона(
		СократитьНеЦифры(XDTOДанные.КодСтраны), 
		XDTOДанные.КодГорода,
		XDTOДанные.Номер,
		XDTOДанные.Добавочный,
		"");
		
КонецФункции

// Функция формирует полное наименование из массив адреса.
//
// Параметры:
//  Адрес - массив - массив содержащий адресные объекты.
// Возвращаемое значение:
//  Строка - Полное наименование адреса в виде строки.
Функция СформироватьПолноеНаименование(Адрес) Экспорт
	
	ПолноеНаименование = "";
	Разделитель = "";
	Для каждого Элемент Из Адрес Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда 
			ПолноеНаименование = ПолноеНаименование + Разделитель + Элемент;
			Разделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолноеНаименование;
КонецФункции

// Читает дополнительные элемент адреса по его пути.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      XPathЭлемента -  Строка - Путь к элементу.
//
//  Возвращаемое значение:
//      Строка - значение элемента.
Функция ДополнительныйЭлементАдреса(XDTOАдрес, XPathЭлемента) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = АдресРФ.Получить(XPathЭлемента);
	Если Результат <> Неопределено Тогда
		Возврат Результат.Значение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Возвращает извлеченный XDTO российского адреса или Неопределено для адреса иностранного.
//
//  Параметры:
//      ОбъектИнформации - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      ОбъектXDTO - российский адрес.
//      Неопределено - нет российского адреса.
//
Функция РоссийскийАдрес(ОбъектИнформации) Экспорт
	Результат = Неопределено;
	ТипXDTO   = Тип("ОбъектXDTO");
	
	Если ТипЗнч(ОбъектИнформации) = ТипXDTO Тогда
		ПространствоИмен = ПространствоИменКИ();
		
		Если ОбъектИнформации.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация") Тогда
			Адрес = ОбъектИнформации.Состав;
		Иначе
			Адрес = ОбъектИнформации;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			Адрес = Адрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(Адрес) = ТипXDTO И Адрес.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			Результат = Адрес;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//  Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		
		Результат = Неопределено;
		ПространствоИмен = ПространствоИменКИ();
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, XPathРайона() );
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

//  Читает и устанавливает здания и помещения адреса. 
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Структура  - устанавливаемое значение. Ожидаются поля:
//                          * Здания - ТаблицаЗначений с колонками:
//                                        ** Тип      - Строка - тип внутреннего классификатора дополнительных адресных
//                                                               объектов. Например "Корпус".
//                                        ** Значение - Строка  - значение номера дома, квартиры и т.п.
//                          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
//  Возвращаемое значение:
//      Структура - текущие данные. Содержит поля:
//          * Здания - ТаблицаЗначений с колонками:
//                        ** Тип        - Строка - тип внутреннего классификатора дополнительных адресных объектов.
//                                                 Например "Корпус".
//                        ** Сокращение - Строка - сокращение названия для использования в представлении.
//                        ** Значение   - Строка - значение номера дома, квартиры и т.п.
//                        ** ПутьXPath  - Строка - путь к значению объекта.
//          * Помещения - ТаблицаЗначений с колонками, аналогично полю Здание.
//
Функция ЗданияИПомещенияАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	Результат = Новый Структура("Здания, Помещения", 
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"),
		ТаблицаЗначений("Тип, Значение, Сокращение, ПутьXPath, Вид", "Тип, Вид"));
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НовоеЗначение <> Неопределено Тогда
		// Запись
		Если НовоеЗначение.Свойство("Здания") Тогда
			Для Каждого Строка Из НовоеЗначение.Здания Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Если НовоеЗначение.Свойство("Помещения") Тогда
			Для Каждого Строка Из НовоеЗначение.Помещения Цикл
				ВставитьЗданиеПомещение(XDTOАдрес, Строка.Тип, Строка.Значение);
			КонецЦикла;
		КонецЕсли;
		Возврат НовоеЗначение
	КонецЕсли;
	
	// Чтение
	Для Каждого ДопЭлемент Из АдресРФ.ДопАдрЭл Цикл
		Если ДопЭлемент.Номер <> Неопределено Тогда
			КодОбъекта = ДопЭлемент.Номер.Тип;
			ТипОбъекта = ТипОбъектаПоКодуСериализации(КодОбъекта);
			Если ТипОбъекта <> Неопределено Тогда
				Вид = ТипОбъекта.Тип;
				Если Вид = 1 Или Вид = 2 Тогда
					НоваяСтрока = Результат.Здания.Добавить();
				ИначеЕсли Вид = 3 Тогда
					НоваяСтрока = Результат.Помещения.Добавить();
				Иначе
					НоваяСтрока = Неопределено;
				КонецЕсли;
				Если НоваяСтрока <> Неопределено Тогда
					НоваяСтрока.Тип        = ТипОбъекта.Наименование;
					НоваяСтрока.Значение   = ДопЭлемент.Номер.Значение;
					НоваяСтрока.Сокращение = ТипОбъекта.Сокращение;
					НоваяСтрока.ПутьXPath  = XPathНомераДополнительногоОбъектаАдресации(НоваяСтрока.Тип);
					НоваяСтрока.Вид        = Вид;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Здания.Сортировать("Вид");
	Результат.Помещения.Сортировать("Вид");
	
	Возврат Результат;
КонецФункции

// Получение глубокого свойства объекта.
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath) Экспорт
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип );
	Возврат АдресРФ.СвРайМО;
КонецФункции

Функция СоздатьНомерДопАдрЭлемента(АдресРФ)
	ДопАдрЭл = СоздатьДопАдрЭлемента(АдресРФ);
	ДопАдрЭл.Номер = ФабрикаXDTO.Создать(ДопАдрЭл.Тип().Свойства.Получить("Номер").Тип);
	Возврат ДопАдрЭл.Номер;
КонецФункции

Функция СоздатьДопАдрЭлемента(АдресРФ)
	СвойствоДопАдрЭлемента = АдресРФ.ДопАдрЭл.ВладеющееСвойство;
	ДопАдрЭлемента = ФабрикаXDTO.Создать(СвойствоДопАдрЭлемента.Тип);
	АдресРФ.ДопАдрЭл.Добавить(ДопАдрЭлемента);
	Возврат ДопАдрЭлемента;
КонецФункции

Процедура ВставитьЗданиеПомещение(XDTOАдрес, Тип, Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись = XDTOАдрес.Получить(XPathНомераДополнительногоОбъектаАдресации(Тип) );
	Если Запись = Неопределено Тогда
		Запись = XDTOАдрес.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		Запись.Номер = ФабрикаXDTO.Создать(Запись.Свойства().Получить("Номер").Тип);
		Запись.Номер.Значение = Значение;
		
		КодТипа = КодСериализацииОбъектаАдресации(Тип);
		Если КодТипа = Неопределено Тогда
			КодТипа = Тип;
		КонецЕсли;
		Запись.Номер.Тип = КодТипа
	Иначе        
		Запись.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Конструктор таблицы значений.
//
Функция ТаблицаЗначений(СписокКолонок, СписокИндексов = "")
	ТаблицаРезультата = Новый ТаблицаЗначений;
	
	Для Каждого КлючЗначение Из (Новый Структура(СписокКолонок)) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	СтрокиИндексов = СтрЗаменить(СписокИндексов, "|", Символы.ПС);
	Для НомерИндекса = 1 По СтрЧислоСтрок(СтрокиИндексов) Цикл
		КолонкиИндекса = СокрЛП(СтрПолучитьСтроку(СтрокиИндексов, НомерИндекса));
		Для Каждого КлючЗначение Из (Новый Структура(КолонкиИндекса)) Цикл
			ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультата;
КонецФункции

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция ПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()

// Формирует строковое представление телефона.
//
// Параметры:
//    КодСтраны     - Строка - код страны.
//    КодГорода     - Строка - код города.
//    НомерТелефона - Строка - номер телефона.
//    Добавочный    - Строка - добавочный номер.
//    Комментарий   - Строка - комментарий.
//
// Возвращаемое значение - Строка - представление телефона.
//
Функция СформироватьПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий) Экспорт
	
	Представление = СокрЛП(КодСтраны);
	Если Не ПустаяСтрока(Представление) И Лев(Представление,1) <> "+" Тогда
		Представление = "+" + Представление;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	НТ = ПривестиНомерТелефонаКШаблону(НомерТелефона);
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НТ);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция СократитьНеЦифры(Текст, ДопустимоКромеЦифр = "", Направление = Истина)
	
	Длина = СтрДлина(Текст);
	Если Направление Тогда
		// Сокращение слева
		Индекс = 1;
		Конец  = 1 + Длина;
		Шаг    = 1;
	Иначе
		// Сокращение справа    
		Индекс = Длина;
		Конец  = 0;
		Шаг    = -1;
	КонецЕсли;
	
	Пока Индекс <> Конец Цикл
		Символ = Сред(Текст, Индекс, 1);
		ЭтоЦифра = (Символ >= "0" И Символ <= "9") Или Найти(ДопустимоКромеЦифр, Символ) = 0;
		Если ЭтоЦифра Тогда
			Прервать;
		КонецЕсли;
		Индекс = Индекс + Шаг;
	КонецЦикла;
	
	Если Направление Тогда
		// Сокращение слева
		Возврат Прав(Текст, Длина - Индекс + 1);
	КонецЕсли;
	
	// Сокращение справа
	Возврат Лев(Текст, Индекс);
	
КонецФункции

// Возвращает первую подстроку из цифр в строке. Параметр ПозицияНачала изменяется на первую не цифру.
//
Функция НайтиПодстрокуЦифр(Текст, ПозицияНачала = Неопределено, ДопустимоКромеЦифр = "")
	
	Если ПозицияНачала = Неопределено Тогда
		ПозицияНачала = 1;
	КонецЕсли;
	
	Результат = "";
	ПозицияКонца = СтрДлина(Текст);
	ПоискНачала  = Истина;
	
	Пока ПозицияНачала <= ПозицияКонца Цикл
		Символ = Сред(Текст, ПозицияНачала, 1);
		ЭтоЦифра = Символ >= "0" И Символ <= "9";
		
		Если ПоискНачала Тогда
			Если ЭтоЦифра Тогда
				Результат = Результат + Символ;
				ПоискНачала = Ложь;
			КонецЕсли;
		Иначе
			Если ЭтоЦифра Или Найти(ДопустимоКромеЦифр, Символ) > 0 Тогда
				Результат = Результат + Символ;    
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПозицияНачала = ПозицияНачала + 1;
	КонецЦикла;
	
	// Убираем возможные висящие разделители справа.
	Возврат СократитьНеЦифры(Результат, ДопустимоКромеЦифр, Ложь);
	
КонецФункции

//  Возвращает флаг того, что переданный адрес - российский.
//
//  Параметры:
//      XDTOАдрес - ОбъектXDTO - Контактная информация или XDTO адреса.
//
//  Возвращаемое значение:
//      Булево - результат проверки.
//
Функция ЭтоРоссийскийАдрес(XDTOАдрес) Экспорт
	Возврат РоссийскийАдрес(XDTOАдрес) <> Неопределено;
КонецФункции

//  Возвращает код дополнительной части адреса для сериализации.
//
//  Параметры:
//      СтрокаЗначения - Строка - значение для поиска, например "Дом", "Корпус", "Литера".
//
// Возвращаемое значение:
//      Число - код
// 
Функция КодСериализацииОбъектаАдресации(СтрокаЗначения) Экспорт
	
	Ключ = ВРег(СокрЛП(СтрокаЗначения));
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Ключ = Ключ Тогда
			Возврат Элемент.Код;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

//  Возвращает код дополнительной части адреса для почтового индекса.
//
// Возвращаемое значение:
//      Строка - код
//
Функция КодСериализацииПочтовогоИндекса() Экспорт
	
	Возврат КодСериализацииОбъектаАдресации(НСтр("ru = 'Почтовый индекс'"));
	
КонецФункции

//  Возвращает XPath для почтового индекса.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathПочтовогоИндекса() Экспорт
	
	Возврат "ДопАдрЭл[ТипАдрЭл='" + КодСериализацииПочтовогоИндекса() + "']";
	
КонецФункции

//  Возвращает XPath для района.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathРайона() Экспорт
	
	Возврат "СвРайМО/Район";
	
КонецФункции

Функция КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	
	Если Уровень = 90 Тогда
		Если ВРег(ТипаАдресногоЭлемента) = "ГСК" Тогда
			Возврат "10300000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "СНТ" Тогда
			Возврат "10600000";
		ИначеЕсли ВРег(ТипаАдресногоЭлемента) = "ТЕР" Тогда
			Возврат "10700000";
		Иначе
			Возврат "10200000";
		КонецЕсли;
	ИначеЕсли Уровень = 91 Тогда
		Возврат "10400000";
	КонецЕсли;
	
	// Все остальное - считаем ориентиром.
	Возврат "Местоположение";
КонецФункции

// Возвращает XPath для дополнительного объекта адресации по умолчанию.
//
//  Параметры;
//      Уровень - Число - уровень объекта. 90  - дополнительный(Варианты: ГСК, СНТ, ТЕР), 91 - подчиненный, -1 -
//                        Ориентир.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента = "") Экспорт
	КодСериализации = КодСериализацииДополнительногоОбъектаАдресации(Уровень, ТипаАдресногоЭлемента);
	Возврат "ДопАдрЭл[ТипАдрЭл='" + КодСериализации + "']";
КонецФункции

//  Возвращает XPath для номера дополнительного объекта адресации.
//
//  Параметры;
//      СтрокаЗначения - Строка - искомый тип, например "Дом", "Корпус".
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathНомераДополнительногоОбъектаАдресации(СтрокаЗначения) Экспорт
	
	Код = КодСериализацииОбъектаАдресации(СтрокаЗначения);
	Если Код = Неопределено Тогда
		Код = СтрЗаменить(СтрокаЗначения, "'", "");
	КонецЕсли;
	
	Возврат "ДопАдрЭл/Номер[Тип='" + Код + "']";
КонецФункции

//  Возвращает строку с описанием типа по коду части адреса.
//  Противоположность функции "КодСериализацииОбъектаАдресации".
//
// Параметры:
//      Код - Строка - код
//
// Возвращаемое значение:
//      Число - Тип
//
Функция ТипОбъектаПоКодуСериализации(Код) Экспорт
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Код = Код Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Возвращает массив вариантов наименований по типу (по признаку владения, строения, и т.п).
//
// Параметры:
//      Тип                  - Число  - запрашиваемый тип.
//      ДопускатьПовторыКода - Булево - Истина - будут возвращены все варианты с повторами ("квартира" - "кв." и т.п.).
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
Функция НаименованияОбъектовАдресацииПоТипу(Тип, ДопускатьПовторыКода = Истина) Экспорт
	Результат = Новый Массив;
	Повторы   = Новый Соответствие;
	
	Для Каждого Элемент Из ТипыОбъектовАдресацииАдресаРФ() Цикл
		Если Элемент.Тип = Тип Тогда
			Если ДопускатьПовторыКода Тогда
				Результат.Добавить(Элемент.Наименование);
			Иначе
				Если Повторы.Получить(Элемент.Код) = Неопределено Тогда
					Результат.Добавить(Элемент.Наименование);
				КонецЕсли;
				Повторы.Вставить(Элемент.Код, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

//  Возвращает массив структур с информацией о частях адреса согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//
// Возвращаемое значение:
//      Массив - содержит структуры - описания.
//
Функция ТипыОбъектовАдресацииАдресаРФ()
	
	Результат = Новый Массив;
	
	// Код, Наименование, Тип, Порядок, КодФИАС
	// Тип: 1 - владение, 2 - здание, 3 - помещение.
	
	Результат.Добавить(СтрокаОбъектаАдресации("1010", НСтр("ru = 'Дом'"),          1, 1, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1020", НСтр("ru = 'Владение'"),     1, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1030", НСтр("ru = 'Домовладение'"), 1, 3, 3));
	
	Результат.Добавить(СтрокаОбъектаАдресации("1050", НСтр("ru = 'Корпус'"),     2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1060", НСтр("ru = 'Строение'"),   2, 2, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("1080", НСтр("ru = 'Литера'"),     2, 3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("1070", НСтр("ru = 'Сооружение'"), 2, 4, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("1040", НСтр("ru = 'Участок'"),    2, 5));
	
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'Квартира'"),  3, 1));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'Офис'"),      3, 2));
	Результат.Добавить(СтрокаОбъектаАдресации("2040", НСтр("ru = 'Бокс'"),      3, 3));
	Результат.Добавить(СтрокаОбъектаАдресации("2020", НСтр("ru = 'Помещение'"), 3, 4));
	Результат.Добавить(СтрокаОбъектаАдресации("2050", НСтр("ru = 'Комната'"),   3, 5));
	Результат.Добавить(СтрокаОбъектаАдресации("2060", НСтр("ru = 'Этаж'"),   3, 6));
	//  Наши сокращения для поддержки обратной совместимости при парсинге.
	Результат.Добавить(СтрокаОбъектаАдресации("2010", НСтр("ru = 'кв.'"),       3, 6));
	Результат.Добавить(СтрокаОбъектаАдресации("2030", НСтр("ru = 'оф.'"),       3, 7));
	
	// Уточняющие объекты
	Результат.Добавить(СтрокаОбъектаАдресации("10100000", НСтр("ru = 'Почтовый индекс'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10200000", НСтр("ru = 'Адресная точка'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10300000", НСтр("ru = 'Садовое товарищество'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10400000", НСтр("ru = 'Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10500000", НСтр("ru = 'Промышленная зона'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10600000", НСтр("ru = 'Гаражно-строительный кооператив'")));
	Результат.Добавить(СтрокаОбъектаАдресации("10700000", НСтр("ru = 'Территория'")));
	
	Возврат Результат;
КонецФункции

Функция СтрокаОбъектаАдресации(Код, Наименование, Тип = 0, Порядок = 0, КодФИАС = 0)
	Возврат Новый Структура("Код, Наименование, Тип, Порядок, КодФИАС, Сокращение, Ключ",
		Код, Наименование, Тип, Порядок, КодФИАС, НРег(Наименование), ВРег(Наименование));
КонецФункции

// Возвращает строку списка полей.
//
// Параметры:
//    СоответствиеПолей - СписокЗначений - соответствия полей.
//    БезПустыхПолей    - Булево - необязательный флаг сохранения полей с пустыми значениями.
//
//  Возвращаемое значение:
//     Строка - результат, преобразованный из списка.
//
Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей, БезПустыхПолей = Истина) Экспорт
	
	СтруктураЗначенийПолей = Новый Структура;
	Для Каждого Элемент Из СоответствиеПолей Цикл
		СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
	КонецЦикла;
	
	Возврат СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей);
КонецФункции

//  Возвращает строку списка полей.
//
//  Параметры:
//    СтруктураЗначенийПолей - Структура - структура значений полей.
//    БезПустыхПолей         - Булево - необязательный флаг сохранения полей с пустыми значениями.
//
//  Возвращаемое значение:
///     Строка - результат преобразования из структуры.
//
Функция СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей = Истина) Экспорт
	
	Результат = "";
	Для Каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Если БезПустыхПолей И ПустаяСтрока(ЗначениеПоля.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС)
		            + ЗначениеПоля.Ключ + "=" + СтрЗаменить(ЗначениеПоля.Значение, Символы.ПС, Символы.ПС + Символы.Таб);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//  Возвращает код региона по его полному наименованию.
//
//  Параметры:
//      НаименованиеРегиона - Строка - полное наименование региона с сокращением.
//
// Возвращаемое значение:
//      Строка - код региона из двух цифр. Пустая строка, если наименование определить не удалось.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция КодРегиона(Знач ПолноеНаименование)
	
	ТР = ТаблицаРегионов();
	Регион = ТР.Найти(ПолноеНаименование, "ПолноеНаименование");
	
	Если Регион = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Регион.Код;
	КонецЕсли;
	
КонецФункции

Функция ТаблицаРегионов() Экспорт
	
	ТР = Новый ТаблицаЗначений;
	ТР.Колонки.Добавить("Код");
	ТР.Колонки.Добавить("Наименование");
	ТР.Колонки.Добавить("Сокращение");
	ТР.Колонки.Добавить("ПолноеНаименование");
	
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		Регион = ТР.Добавить();
		
		Код1 = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		Код2 = Цел(Код1 / МаскаРегиона());
		Регион.Код = Формат(Код2, "ЧЦ=2; ЧВН=");
		
		Регион.Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		Регион.Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		Регион.ПолноеНаименование = Регион.Наименование + " " + Регион.Сокращение;
		
	КонецЦикла;
	
	ТР.Индексы.Добавить("Код,Наименование,ПолноеНаименование");
	
	Возврат ТР;

КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция МаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

//  Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка, Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	ТР = ТаблицаРегионов();
	Регион = ТР.Найти(Код, "Код");
	
	Если Регион = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Регион.ПолноеНаименование;
	КонецЕсли;
	
КонецФункции

//  Читает и устанавливает почтовый индекс адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - Контактная информация или XDTO адреса.
//      НовоеЗначение - Строка     - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - почтовый индекс.
//
Функция ПочтовыйИндексАдреса(XDTOАдрес, НовоеЗначение = Неопределено) Экспорт
	
	АдресРФ = РоссийскийАдрес(XDTOАдрес);
	Если АдресРФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НовоеЗначение = Неопределено Тогда
		// Чтение
		Результат = АдресРФ.Получить( XPathПочтовогоИндекса() );
		Если Результат <> Неопределено Тогда
			Результат = Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	// Запись
	КодИндекса = КодСериализацииПочтовогоИндекса();
	
	ЗаписьИндекса = АдресРФ.Получить(XPathПочтовогоИндекса());
	Если ЗаписьИндекса = Неопределено Тогда
		ЗаписьИндекса = АдресРФ.ДопАдрЭл.Добавить( ФабрикаXDTO.Создать(XDTOАдрес.ДопАдрЭл.ВладеющееСвойство.Тип) );
		ЗаписьИндекса.ТипАдрЭл = КодИндекса;
	КонецЕсли;
	
	ЗаписьИндекса.Значение = НовоеЗначение;
	Возврат НовоеЗначение;
КонецФункции

// Возвращает варианты типов домов (по признаку владения).
Функция ВариантыДанныхДом() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		НаименованияОбъектовАдресацииПоТипу(1), Ложь);
		
КонецФункции

// Возвращает варианты типов домов (по признаку строения).
Функция ВариантыДанныхСтроение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		НаименованияОбъектовАдресацииПоТипу(2), Ложь);
		
КонецФункции

// Возвращает варианты типов помещений.
Функция ВариантыДанныхПомещение() Экспорт
	
	Возврат Новый Структура("ВариантыТипа, МожноПодбиратьЗначения", 
		НаименованияОбъектовАдресацииПоТипу(3, Ложь), Ложь);
		
КонецФункции

// Возвращает структуру с наименованием и сокращением от значения.
//
// Параметры:
//     Текст - Строка - Полное наименование.
//
// Возвращаемое значение:
//     Структура - результат обработки.
//         * Наименование - Строка - часть текста.
//         * Сокращение   - Строка - часть текста.
//
Функция НаименованиеСокращение(Знач Текст) Экспорт
	Результат = Новый Структура("Наименование, Сокращение");
	
	Части = НаборНаименованийИСокращений(Текст, Истина);
	Если Части.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Результат, Части[0]);
	Иначе
		Результат.Наименование = Текст;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает отдельно сокращение от значения.
//
// Параметры:
//     Текст - Строка - Полное наименования.
//
// Возвращаемое значение:
//     Строка - выделенное сокращение.
//
Функция Сокращение(Знач Текст) Экспорт
	
	Части = НаименованиеСокращение(Текст);
	Возврат Части.Сокращение;
	
КонецФункции

// Разделяет текст на слова по указанным разделителям. По умолчанию разделители - пробельные символы.
//
// Параметры:
//     Текст       - Строка - Разделяемая строка.
//     Разделители - Строка - Необязательная строка символов-разделителей.
//
// Возвращаемое значение:
//     Массив - строки, слова
//
Функция СловаТекста(Знач Текст, Знач Разделители = Неопределено) Экспорт
	
	НачалоСлова = 0;
	Состояние   = 0;
	Результат   = Новый Массив;
	
	Для Позиция = 1 По СтрДлина(Текст) Цикл
		ТекущийСимвол = Сред(Текст, Позиция, 1);
		ЭтоРазделитель = ?(Разделители = Неопределено, ПустаяСтрока(ТекущийСимвол), Найти(Разделители, ТекущийСимвол) > 0);
		
		Если Состояние = 0 И (Не ЭтоРазделитель) Тогда
			НачалоСлова = Позиция;
			Состояние   = 1;
		ИначеЕсли Состояние = 1 И ЭтоРазделитель Тогда
			Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));
			Состояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Состояние = 1 Тогда
		Результат.Добавить(Сред(Текст, НачалоСлова, Позиция-НачалоСлова));    
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Разделяет текст, разделенный запятыми.
//
// Параметры:
//     Текст              - Срока  - Разделяемый текст.
//     ВыделятьСокращения - Булево - Опциональный параметр режима работы.
//
// Возвращаемое значение:
//     Массив - содержит стурктуры "Наименование, Сокращение".
//
Функция НаборНаименованийИСокращений(Знач Текст, Знач ВыделятьСокращения = Истина) Экспорт
	
	Результат = Новый Массив;
	Для Каждого Часть Из СловаТекста(Текст, ",") Цикл
		СтрокаЧасти = СокрЛП(Часть);
		Если ПустаяСтрока(СтрокаЧасти) Тогда
			Продолжить;
		КонецЕсли;
		
		Позиция = ?(ВыделятьСокращения, СтрДлина(СтрокаЧасти), 0);
		Пока Позиция > 0 Цикл
			Если Сред(СтрокаЧасти, Позиция, 1) = " " Тогда
				Результат.Добавить(Новый Структура("Наименование, Сокращение",
					СокрЛП(Лев(СтрокаЧасти, Позиция-1)), СокрЛП(Сред(СтрокаЧасти, Позиция))));
				Позиция = -1;
				Прервать;
			КонецЕсли;
			Позиция = Позиция - 1;
		КонецЦикла;
		Если Позиция = 0 Тогда
			Результат.Добавить(Новый Структура("Наименование, Сокращение", СтрокаЧасти));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

// Возвращает признак того, является ли строка данных контактной информации XML данными.
//
// Параметры:
//     Текст - Строка - Проверяемая строка.
//
// Возвращаемое значение:
//     Булево - результат проверки.
//
Функция ЭтоКонтактнаяИнформацияВXML(Знач Текст) Экспорт
	
	Возврат ТипЗнч(Текст) = Тип("Строка") И Лев(СокрЛ(Текст),1) = "<";
	
КонецФункции

// Получает сокращение географического названия объекта.
//
// Параметры:
//    ГеографическоеНазвание - Строка - географическое название объекта.
//
// Возвращаемое значение:
//     Строка - пустая строка или последнее слово в географическом названии.
//
Функция АдресноеСокращение(Знач ГеографическоеНазвание) Экспорт
	
	Сокращение = "";
	МассивСлов = РазложитьСтрокуВМассивСлов(ГеографическоеНазвание, " ");
	Если МассивСлов.Количество() > 1 Тогда
		Сокращение = МассивСлов[МассивСлов.Количество() - 1];
	КонецЕсли;
	
	Возврат Сокращение;
	
КонецФункции

// Возвращает пустую структура адреса.
//
// Возвращаемое значение:
//    Структура - адрес, ключи - имена полей, значения поля.
//
Функция СтруктураПолейАдреса() Экспорт
	
	СтруктураАдреса = Новый Структура;
	СтруктураАдреса.Вставить("Представление", "");
	СтруктураАдреса.Вставить("Страна", "");
	СтруктураАдреса.Вставить("НаименованиеСтраны", "");
	СтруктураАдреса.Вставить("КодСтраны","");
	СтруктураАдреса.Вставить("Индекс","");
	СтруктураАдреса.Вставить("Регион","");
	СтруктураАдреса.Вставить("РегионСокращение","");
	СтруктураАдреса.Вставить("Район","");
	СтруктураАдреса.Вставить("РайонСокращение","");
	СтруктураАдреса.Вставить("Город","");
	СтруктураАдреса.Вставить("ГородСокращение","");
	СтруктураАдреса.Вставить("НаселенныйПункт","");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение","");
	СтруктураАдреса.Вставить("Улица","");
	СтруктураАдреса.Вставить("УлицаСокращение","");
	СтруктураАдреса.Вставить("Дом","");
	СтруктураАдреса.Вставить("Корпус","");
	СтруктураАдреса.Вставить("Квартира","");
	СтруктураАдреса.Вставить("ТипДома","");
	СтруктураАдреса.Вставить("ТипКорпуса","");
	СтруктураАдреса.Вставить("ТипКвартиры","");
	СтруктураАдреса.Вставить("НаименованиеВида","");
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Возвращает пустую структура телефона.
//
// Возвращаемое значение:
//    Структура - ключи - имена полей, значения поля.
//
Функция СтруктураПолейТелефона() Экспорт
	
	СтруктураТелефона = Новый Структура;
	СтруктураТелефона.Вставить("Представление", "");
	СтруктураТелефона.Вставить("КодСтраны", "");
	СтруктураТелефона.Вставить("КодГорода", "");
	СтруктураТелефона.Вставить("НомерТелефона", "");
	СтруктураТелефона.Вставить("Добавочный", "");
	СтруктураТелефона.Вставить("Комментарий", "");
	
	Возврат СтруктураТелефона;
	
КонецФункции

// Возвращает структуру контактной информации по типу.
//
// Параметры:
//    ТипКИ - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение:
//    Структура - пустая структура контактной информации, ключи - имена полей, значения поля.
//
Функция СтруктураКонтактнойИнформацииПоТипу(ТипКИ) Экспорт
	
	Если ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		Возврат СтруктураПолейАдреса();
	ИначеЕсли ТипКИ = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат СтруктураПолейТелефона();
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

//  Преобразует строку полей вида ключ = значение в структуру.
//
//  Параметры:
//      СтрокаПолей             - Строка - строка полей с данными в виде ключ = значение.
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - для определения состава незаполненных
//                                                                            полей.
//
//  Возвращаемое значение:
//      Структура - значения полей.
//
Функция СтруктураЗначенийПолей(СтрокаПолей, ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если ВидКонтактнойИнформации = Неопределено Тогда
		Результат = Новый Структура;
	Иначе
		Результат = СтруктураКонтактнойИнформацииПоТипу(ВидКонтактнойИнформации.Тип);
	КонецЕсли;
	
	ПоследнийЭлемент = Неопределено;
	
	Для Итерация = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
		ПолученнаяСтрока = СтрПолучитьСтроку(СтрокаПолей, Итерация);
		Если Лев(ПолученнаяСтрока, 1) = Символы.Таб Тогда
			Если Результат.Количество() > 0 Тогда
				Результат.Вставить(ПоследнийЭлемент, Результат[ПоследнийЭлемент] + Символы.ПС + Сред(ПолученнаяСтрока, 2));
			КонецЕсли;
		Иначе
			ПозицияСимвола = Найти(ПолученнаяСтрока, "=");
			Если ПозицияСимвола <> 0 Тогда
				НазваниеПоля = Лев(ПолученнаяСтрока, ПозицияСимвола - 1);
				ЗначениеПоля = Сред(ПолученнаяСтрока, ПозицияСимвола + 1);
				Если НазваниеПоля = "Регион" Или НазваниеПоля = "Район" Или НазваниеПоля = "Город" 
					Или НазваниеПоля = "НаселенныйПункт" Или НазваниеПоля = "Улица" Тогда
					Если Найти(СтрокаПолей, НазваниеПоля + "Сокращение") = 0 Тогда
						Результат.Вставить(НазваниеПоля + "Сокращение", АдресноеСокращение(ЗначениеПоля));
					КонецЕсли;
				КонецЕсли;
				Результат.Вставить(НазваниеПоля, ЗначениеПоля);
				ПоследнийЭлемент = НазваниеПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает список значений. Преобразует строку полей в список значений.
//
// Параметры:
//    СтрокаПолей - Строка - строка полей.
//
// Возвращаемое значение:
//    СписокЗначений - список значений полей.
//
Функция ПреобразоватьСтрокуВСписокПолей(СтрокаПолей) Экспорт
	
	// XML сериализацию преобразовывать не надо.
	Если ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Возврат СтрокаПолей;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	СтруктураЗначенийПолей = СтруктураЗначенийПолей(СтрокаПолей);
	Для каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Результат.Добавить(ЗначениеПоля.Значение, ЗначениеПоля.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Преобразует адрес формата XDTO в старый список полей типа СписокЗначений.
//
// Параметры:
//     XDTOАдрес               - ОбъектXDTO, Строка - контактная информация или строка XML.
//     РасширенныйСоставПолей - Булево - необязательный флаг того, что состав полей будет сокращен для совместимости
//                                     с обменом БСП 2.1.2.
//
//  Возвращаемое значение:
//     СписокЗначений 
//
Функция АдресВСтарыйСписокПолей(XDTOАдрес, РасширенныйСоставПолей = Истина) Экспорт
	Список = Новый СписокЗначений;
	
	ПространствоИмен = ПространствоИменКИ();
	XDTOТип = XDTOАдрес.Тип();
	Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		
		// Страна с кодом
		ДобавитьЗначение(Список, "Страна", XDTOАдрес.Страна);
		Если ПустаяСтрока(XDTOАдрес.Страна) Тогда
			КодСтраны = "";
		Иначе
			Страна = Справочники.КлассификаторСтранМира.НайтиПоНаименованию(XDTOАдрес.Страна, Истина);
			КодСтраны = СокрЛП(Страна.Код);
		КонецЕсли;
		ДобавитьЗначение(Список, "КодСтраны", КодСтраны);
		
		Если Не ЭтоРоссийскийАдрес(XDTOАдрес) Тогда
			Возврат Список;
		КонецЕсли;
		
		АдресРФ = XDTOАдрес.Состав;
		
	ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ") Тогда
		АдресРФ = XDTOАдрес;
		
	Иначе
		Возврат Список;
		
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Индекс", ПочтовыйИндексАдреса(АдресРФ) );
	
	ДобавитьЗначение(Список, "Регион", АдресРФ.СубъектРФ);
	ДобавитьЗначение(Список, "КодРегиона", КодРегиона(АдресРФ.СубъектРФ) );
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РегионСокращение", Сокращение(АдресРФ.СубъектРФ));
	КонецЕсли;
	
	Район = РайонАдреса(АдресРФ);
	ДобавитьЗначение(Список, "Район", Район);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "РайонСокращение", Сокращение(Район));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Город", АдресРФ.Город);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "ГородСокращение", Сокращение(АдресРФ.Город));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "НаселенныйПункт", АдресРФ.НаселПункт);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "НаселенныйПунктСокращение", Сокращение(АдресРФ.НаселПункт));
	КонецЕсли;
	
	ДобавитьЗначение(Список, "Улица", АдресРФ.Улица);
	Если РасширенныйСоставПолей Тогда
		ДобавитьЗначение(Список, "УлицаСокращение", Сокращение(АдресРФ.Улица));
	КонецЕсли;
	
	// Дом и корпус
	ЗданияИПомещения = ЗданияИПомещенияАдреса(АдресРФ);
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхДом(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипДома", "");
		ДобавитьЗначение(Список, "Дом",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипДома", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Дом",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Здания, ВариантыДанныхСтроение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
			ДобавитьЗначение(Список, "ТипКорпуса", "");
			ДобавитьЗначение(Список, "Корпус",     "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл
			ДобавитьЗначение(Список, "ТипКорпуса", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Корпус",     СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОбъекта = ЗначениеЗданияИлиПомещения(ЗданияИПомещения.Помещения, ВариантыДанныхПомещение(), РасширенныйСоставПолей);
	Если ПараметрыОбъекта.Количество() = 0 Тогда
		ДобавитьЗначение(Список, "ТипКвартиры", "");
		ДобавитьЗначение(Список, "Квартира",    "");
	Иначе
		Для Каждого СтрокаОбъекта Из ПараметрыОбъекта Цикл	
			ДобавитьЗначение(Список, "ТипКвартиры", СтрокаОбъекта.Тип,      РасширенныйСоставПолей);
			ДобавитьЗначение(Список, "Квартира",    СтрокаОбъекта.Значение, РасширенныйСоставПолей);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Список;
КонецФункции

Процедура ДобавитьЗначение(Список, ИмяПоля, Значение, РазрешитьДубли = Ложь)
	
	Если Не РазрешитьДубли Тогда
		Для Каждого Элемент Из Список Цикл
			Если Элемент.Представление = ИмяПоля Тогда
				Элемент.Значение = Строка(Значение);
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Список.Добавить(Строка(Значение), ИмяПоля);
КонецПроцедуры

Функция ЗначениеЗданияИлиПомещения(Данные, Варианты, ВсеЗначенияВарианта)
	Результат = ТаблицаЗначений("Тип, Значение");
	
	Для Каждого Вариант Из Варианты.ВариантыТипа Цикл
		Для Каждого Строка Из Данные.НайтиСтроки(Новый Структура("Тип", Вариант)) Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
			Если Не ВсеЗначенияВарианта Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НомерТелефонаВСтарыйСписокПолей(XDTOТелефон)
	Результат = Новый СписокЗначений;
	
	Результат.Добавить(XDTOТелефон.КодСтраны,  "КодСтраны");
	Результат.Добавить(XDTOТелефон.КодГорода,  "КодГорода");
	Результат.Добавить(XDTOТелефон.Номер,      "НомерТелефона");
	Результат.Добавить(XDTOТелефон.Добавочный, "Добавочный");
	
	Возврат Результат;
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Контактная информация'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
КонецФункции

// Возвращает значение перечисления тип вида контактной информации.
//
//  Параметры:
//    ВидИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - источник данных.
//
Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации) Экспорт
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип = Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации <> Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует строку в XDTO контактную информацию адреса.
//
//  Параметры:
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция АдресXMLВXDTO(Знач ЗначенияПолей, Знач Представление = "", Знач ОжидаемыйТип = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ЗначенияПолей);
	РазбиратьПоПолям = (ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Структура") 
		Или (ТипЗначения = Тип("Строка") И Не ПустаяСтрока(ЗначенияПолей)));
	Если РазбиратьПоПолям Тогда
		// Разбираем из значений полей.
		Возврат ДесериализацияАдресаОбщая(ЗначенияПолей, Представление, ОжидаемыйТип);
	КонецЕсли;
	
	// Разбираем адрес из его представления по классификатору.
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
	//	Возврат СформироватьАдресПоПредставлению(Представление);
	//КонецЕсли;
	
	// Пустой объект с представлением.
	ПространствоИмен = ПространствоИменКИ();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	Результат.Представление = Представление;
	Возврат Результат;
	
КонецФункции

Функция ДесериализацияАдресаОбщая(Знач ЗначенияПолей, Знач Представление, Знач ОжидаемыйТип = Неопределено)
	
	Если ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	Если ОжидаемыйТип <> Неопределено Тогда
		Если ОжидаемыйТип <> Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
		КонецЕсли;
	КонецЕсли;
	
	// Старый формат через разделитель строк и равенство.
	ПространствоИмен = ПространствоИменКИ();
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	Результат.Комментарий = "";
	Результат.Состав      = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
	
	АдресРоссийский = Истина;
	НазваниеРоссии  = ВРег(Справочники.КлассификаторСтранМира.Россия.Наименование);
	
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	// Российский
	АдресРФ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "АдресРФ"));
	
	// Общий состав
	Адрес = Результат.Состав;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = ПреобразоватьСтрокуВСписокПолей(СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля="ИНДЕКС" Тогда
			ЭлементИндекс = СоздатьДопАдрЭлемента(АдресРФ);
			ЭлементИндекс.ТипАдрЭл = КодСериализацииПочтовогоИндекса();
			ЭлементИндекс.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Адрес.Страна = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеРоссии Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			;
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			АдресРФ.СубъектРФ = РегионКода(ЭлементСписка.Значение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			АдресРФ.СубъектРФ = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			Если АдресРФ.СвРайМО = Неопределено Тогда
				АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Тип().Свойства.Получить("СвРайМО").Тип )
			КонецЕсли;
			АдресРФ.СвРайМО.Район = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			АдресРФ.Город = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			АдресРФ.НаселПункт = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			АдресРФ.Улица = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Тип = КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипДомаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Если ЭлементДом = Неопределено Тогда
				ЭлементДом = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементДом.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Тип = КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКорпус.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Тип = КодСериализацииОбъектаАдресации(ЭлементСписка.Значение);
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = СоздатьНомерДопАдрЭлемента(АдресРФ);
			КонецЕсли;
			ЭлементКвартира.Значение = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		ЭлементДом.Тип = КодСериализацииОбъектаАдресации("Дом");
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.Тип = КодСериализацииОбъектаАдресации("Корпус");
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.Тип = КодСериализацииОбъектаАдресации("Квартира");
	КонецЕсли;
	
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.Представление = Представление;
	Иначе
		Результат.Представление = ПолеПредставления;
	КонецЕсли;
	
	Адрес.Состав = ?(АдресРоссийский, АдресРФ, Результат.Представление);
	
	Возврат Результат;
КонецФункции

Функция ДесериализацияТелефонаФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено)
	
	Если ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменКИ();
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	ИначеЕсли ОжидаемыйТип=Неопределено Тогда
		// Считаем телефоном
		Данные = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		
	Иначе
		ВызватьИсключение НСтр("ru='Ошибка десериализации контактной информации, ожидается телефон или факс'");
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Состав        = Данные;
	
	// Из пар ключ-значение
	СписокЗначенийПолей = Неопределено;
	Если ТипЗнч(ЗначенияПолей)=Тип("СписокЗначений") Тогда
		СписокЗначенийПолей = ЗначенияПолей;
	ИначеЕсли Не ПустаяСтрока(ЗначенияПолей) Тогда
		СписокЗначенийПолей = ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ПолеПредставления = "";
	Если СписокЗначенийПолей <> Неопределено Тогда
		Для Каждого ЗначениеПоля Из СписокЗначенийПолей Цикл
			Поле = ВРег(ЗначениеПоля.Представление);
			
			Если Поле = "КОДСТРАНЫ" Тогда
				Данные.КодСтраны = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "КОДГОРОДА" Тогда
				Данные.КодГорода = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "НОМЕРТЕЛЕФОНА" Тогда
				Данные.Номер = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ДОБАВОЧНЫЙ" Тогда
				Данные.Добавочный = ЗначениеПоля.Значение;
				
			ИначеЕсли Поле = "ПРЕДСТАВЛЕНИЕ" Тогда
				ПолеПредставления = СокрЛП(ЗначениеПоля.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Представление с приоритетами.
		Если Не ПустаяСтрока(Представление) Тогда
			Результат.Представление = Представление;
		Иначе
			Результат.Представление = ПолеПредставления;
		КонецЕсли;
		
		Возврат Результат;
	КонецЕсли;
	
	// Разбираем из представления.
	
	// Группы цифр, разделенные символами - не цифрами: страна, город, номер, добавочный. 
	// Добавочный включает в себя непробельные символы слева и справа.
	Позиция = 1;
	Данные.КодСтраны  = НайтиПодстрокуЦифр(Представление, Позиция);
	НачалоГорода = Позиция;
	
	Данные.КодГорода  = НайтиПодстрокуЦифр(Представление, Позиция);
	Данные.Номер      = НайтиПодстрокуЦифр(Представление, Позиция, " -");
	
	Добавочный = СокрЛП(Сред(Представление, Позиция));
	Если Лев(Добавочный, 1) = "," Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 3 ))= "ДОБ" Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 4));
	КонецЕсли;
	Если ВРег(Лев(Добавочный, 1 ))= "." Тогда
		Добавочный = СокрЛ(Сред(Добавочный, 2));
	КонецЕсли;
	Данные.Добавочный = СокрЛП(Добавочный);
	
	// Корректируем возможные ошибки.
	Если ПустаяСтрока(Данные.Номер) Тогда
		Если Лев(СокрЛ(Представление),1)="+" Тогда
			// Была попытка явно указать код страны, оставляем страну в покое.
			Данные.КодГорода  = "";
			Данные.Номер      = СократитьНеЦифры(Сред(Представление, НачалоГорода));
			Данные.Добавочный = "";
		Иначе
			Данные.КодСтраны  = "";
			Данные.КодГорода  = "";
			Данные.Номер      = Представление;
			Данные.Добавочный = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат.Представление = Представление;
	Возврат Результат;
КонецФункции  

// Преобразует строку в XDTO контактную информацию телефона.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияТелефона(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO контактную информацию Факса.
//
//      ЗначенияПолей - Строка - сериализованная информация, значения полей.
//      Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей
//                               пусто.
//      ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
//  Возвращаемое значение:
//      ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияФакса(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	Возврат ДесериализацияТелефонаФакса(ЗначенияПолей, Представление, ОжидаемыйТип);
КонецФункции

// Преобразует строку в XDTO прочую контактную информацию.
//
// Параметры:
//   ЗначенияПолей - Строка - сериализованная информация, значения полей.
//   Представление - Строка - представление старший-младший, используется для попытки разбора, если ЗначенияПолей пусто.
//   ОжидаемыйТип  - ПеречислениеСсылка.ТипыКонтактнойИнформации - необязательный тип для контроля.
//
// Возвращаемое значение:
//   ОбъектXDTO  - контактной информации.
//
Функция ДесериализацияПрочейКонтактнойИнформации(ЗначенияПолей, Представление = "", ОжидаемыйТип = Неопределено) Экспорт
	
	Если ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей) Тогда
		// Общий формат контактной информации.
		Возврат КонтактнаяИнформацияИзXML(ЗначенияПолей, ОжидаемыйТип);
	КонецЕсли;
	
	ПространствоИмен = ПространствоИменКИ();
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Результат.Представление = Представление;
	
	Если ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		
	ИначеЕсли ОжидаемыйТип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		
	ИначеЕсли ОжидаемыйТип <> Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, ожидается другой тип'");
		
	КонецЕсли;
	
	Результат.Состав.Значение = Представление;
	
	Возврат Результат;
	
КонецФункции

// Преобразует XML в объект XDTO контактной информации.
//
//  Параметры:
//      Текст            - Строка - строка XML контактной информации.
//      ОжидаемыйВид     - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации, Структура
//      РезультатПреобразования - Структура - если задана, то в свойства записываются сведения:
//        * ТекстОшибки - Строка - описание ошибок чтения. При этом возвращаемое значение функции будет 
//                                 корректного типа, но не заполнен.
//
// Возвращаемое значение:
//      ОбъектXDTO - контактная информация, соответствующая XDTO-пакету КонтактнаяИнформация.
//   
Функция КонтактнаяИнформацияИзXML(Знач Текст, Знач ОжидаемыйВид = Неопределено, РезультатПреобразования = Неопределено) Экспорт
	
	ОжидаемыйТип = ТипВидаКонтактнойИнформации(ОжидаемыйВид);
	
	ПеречислениеАдрес                 = Перечисления.ТипыКонтактнойИнформации.Адрес;
	ПеречислениеАдресЭлектроннойПочты = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПеречислениеВебСтраница           = Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
	ПеречислениеТелефон               = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПеречислениеДругое                = Перечисления.ТипыКонтактнойИнформации.Другое;
	
	ПространствоИмен = ПространствоИменКИ();
	Если ЭтоКонтактнаяИнформацияВXML(Текст) Тогда
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Текст);
		
		ТекстОшибки = Неопределено;
		Попытка
			Результат = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
		Исключение
			// Некорректный формат XML
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , Текст, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если ТипЗнч(ОжидаемыйВид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
				ТекстОшибки = СтрЗаменить(НСтр("ru = 'Некорректный формат XML контактной информации для ""%1"", значения полей были очищены.'"),
					"%1", Строка(ОжидаемыйВид));
			Иначе
				ТекстОшибки = НСтр("ru = 'Некорректный формат XML контактной информации, значения полей были очищены.'");
			КонецЕсли;
		КонецПопытки;
		
		Если ТекстОшибки = Неопределено Тогда
			// Контролируем соответствие типов.
			НайденТип = ?(Результат.Состав = Неопределено, Неопределено, Результат.Состав.Тип());
			Если ОжидаемыйТип = ПеречислениеАдрес И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается адрес электронной почты'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается веб-страница'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается телефон'");
			ИначеЕсли ОжидаемыйТип = ПеречислениеДругое И НайденТип <> ФабрикаXDTO.Тип(ПространствоИмен, "Прочее") Тогда
				ТекстОшибки = НСтр("ru = 'Ошибка десериализации контактной информации, ожидается ""другое""'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = Неопределено Тогда
			// Успешно прочитано
			Возврат Результат;
		КонецЕсли;
		
		// Проверим ошибку и вернем расширенную информацию.
		Если РезультатПреобразования = Неопределено Тогда
			ВызватьИсключение ТекстОшибки;
		ИначеЕсли ТипЗнч(РезультатПреобразования) <> Тип("Структура") Тогда
			РезультатПреобразования = Новый Структура;
		КонецЕсли;
		РезультатПреобразования.Вставить("ТекстОшибки", ТекстОшибки);
		
		// Будет возвращен пустой объект.
		Текст = "";
	КонецЕсли;
	
	Если ТипЗнч(Текст) = Тип("СписокЗначений") Тогда
		Представление = "";
		ЭтоНовый = Текст.Количество() = 0;
	Иначе
		Представление = Строка(Текст);
		ЭтоНовый = ПустаяСтрока(Текст);
	КонецЕсли;
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	
	// Разбор
	Если ОжидаемыйТип = ПеречислениеАдрес Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Адрес"));
		Иначе
			Результат = АдресXMLВXDTO(Текст, Представление, ОжидаемыйТип);
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеТелефон Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона"));
		Иначе
			Результат = ДесериализацияТелефона(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеАдресЭлектроннойПочты Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеВебСтраница Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)
		КонецЕсли;
		
	ИначеЕсли ОжидаемыйТип = ПеречислениеДругое Тогда
		Если ЭтоНовый Тогда
			Результат.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "Прочее"));
		Иначе
			Результат = ДесериализацияПрочейКонтактнойИнформации(Текст, Представление, ОжидаемыйТип)    
		КонецЕсли;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации контактной информации, не указан ожидаемый тип'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает поля контактной информации.
//
// Параметры:
//   XDTOКонтактнаяИнформация - ОбъектXDTO, Строка - контактная информация или строка XML.
//   СтарыйСоставПолей        - Булево - необязательный флаг того, что из состава полей будут исключены
//                                          поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//   Структура - данные. Содержит поля:
//     * Представление        - Строка - представление адреса.
//     * ЗначенияПолей        - СписокЗначений - значения. Состав значений для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав значений для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция КонтактнаяИнформацияВСтаруюСтруктуру(XDTOКонтактнаяИнформация, СтарыйСоставПолей = Ложь) Экспорт
	
	Если ЭтоКонтактнаяИнформацияВXML(XDTOКонтактнаяИнформация) Тогда
		XDTOКонтактная = КонтактнаяИнформацияИзXML(XDTOКонтактнаяИнформация);
	Иначе
		XDTOКонтактная = XDTOКонтактнаяИнформация
	КонецЕсли;
	
	Результат = Новый Структура("Представление, ЗначенияПолей", XDTOКонтактная.Представление, Новый СписокЗначений);
	
	ПространствоИмен = ПространствоИменКИ();
	Состав = XDTOКонтактная.Состав;
	
	Если Состав = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Тип = Состав.Тип();
	Если Тип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		Результат.ЗначенияПолей = АдресВСтарыйСписокПолей(Состав, Не СтарыйСоставПолей);
		Результат.ЗначенияПолей.Добавить(Результат.Представление, "Представление");
		
	ИначеЕсли Тип = ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		Результат.ЗначенияПолей = НомерТелефонаВСтарыйСписокПолей(Состав);
		Результат.ЗначенияПолей.Добавить(XDTOКонтактная.Комментарий, "Комментарий");
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - XML контактной информации.
//    СокращенныйСоставПолей - Булево - если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка  - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СокращенныйСоставПолей);
		Возврат ПреобразоватьСписокПолейВСтроку(СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - XML контактной информации или пары ключ-значение.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - параметры контактной информации. 
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. 
//		 Состав свойств для адреса:
//        ** Страна           - Строка - текстовое представление страны.
//        ** КодСтраны        - Строка - код страны по ОКСМ.
//        ** Индекс           - Строка - почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - текстовое представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - текстовое представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - текстовое представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - текстовое представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - текстовое представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Дом              - Строка - текстовое представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Корпус           - Строка - текстовое представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - см. ТипыОбъектовАдресацииАдресаРФ().
//        ** Квартира         - Строка - текстовое представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - код страны. Например, +7.
//        ** КодГорода        - Строка - код города. Например, 495.
//        ** НомерТелефона    - Строка - номер телефона.
//        ** Добавочный       - Строка - добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат СтруктураЗначенийПолей(ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации <> Неопределено Тогда
		// Генерируем по виду
		Возврат СтруктураКонтактнойИнформацииПоТипу(ВидКонтактнойИнформации.Тип);
		
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями.
	Возврат СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
КонецФункции

// ============ вспомогательные функции
//

// Определяет, является ли символ разделителем.
//
// Параметры:
//  КодСимвола      - Число  - код проверяемого символа;
//  РазделителиСлов - Строка - символы разделителей.
//
// Возвращаемое значение:
//  Булево - истина, если символ является разделителем.
//
Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
//  ИмяСправочника - Строка, имя справочника, объект которого надо найти,
//  ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
//  ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск,
//  Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ИмяСправочника = "НоменклатураПоставщиков" Тогда
		
		// Справочник отсутсвует в системе - вернем структуру содержащую значение реквизита
		Результат = Новый Структура(ИмяРеквизита, ЗначРеквизита);
		
	Иначе
		
		ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
		Если НЕ ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) Тогда
			// это не стандартный реквизит
			Если НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда 
				// это не обычный реквизит
				Возврат Неопределено;
			Иначе
				ОписаниеРеквизита = ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита);
			КонецЕсли;
		Иначе
			ОписаниеРеквизита = ОбъектМетаданных.СтандартныеРеквизиты[ИмяРеквизита];
		КонецЕсли;
		
		СпособСравнения = " = ";
		Если ОписаниеРеквизита.Тип.Типы().Найти(Тип("Строка")) <> Неопределено И ОписаниеРеквизита.Тип.Типы().Количество() = 1 Тогда
			Если ОписаниеРеквизита.Тип.КвалификаторыСтроки.Длина = 0 Тогда
				СпособСравнения = " ПОДОБНО ";
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскСправочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК ИскСправочник
		|ГДЕ
		|	Не ИскСправочник.ПометкаУдаления И
		|	ИскСправочник."+ИмяРеквизита+СпособСравнения+"&ЗначРеквизита";
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", 	Владелец);
		КонецЕсли;
		Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что реквизит входит в подмножество стандартных реквизитов
//
// Параметры:
//  СтандартныеРеквизиты – ОписанияСтандартныхРеквизитов - тип и значение описывает коллекцию настроек различных стандартных реквизитов;
//  ИмяРеквизита – Строка – реквизит который необходимо проверить на принадлежность множеству стандартных реквизитов;
// 
//  Возвращаемое значение:
// Тип: Булево. Истина -  реквизит входит в подмножество стандартных реквизитов; Ложь – нет.
//
Функция ЭтоСтандартныйРеквизит(СтандартныеРеквизиты, ИмяРеквизита) Экспорт
	
	Для Каждого Реквизит ИЗ СтандартныеРеквизиты Цикл
		
		Если Реквизит.Имя = ИмяРеквизита Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров
// начинается с единицы.
//
// Параметры
//  СтрокаПодстановки  – Строка – шаблон строки с параметрами (вхождениями вида "%ИмяПараметра").
// Параметр<n>         - Строка - параметр
// Возвращаемое значение:
//   Строка   – текстовая строка с подставленными параметрами
//
// Пример:
// Строка = ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк");
//
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = "";
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = "" Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Строка          - Строка - строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - строка, содержащая символы-разделители.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - отдельные слова.
//
// Пример:
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один", "два2_", "три";
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено)
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие полных наименований адресных объектов и их сокращения.
//
// Параметры:
//  НаименованияАдресныхОбъектов - Массив - Полные наименования адресных объектов. Если передан пустой массив,
//                                          то будут возвращен полный список наименований и сокращений.
//
// Возвращаемое значение:
//  Соответствие - Соответствие найденных полных наименований адресных объектов их сокращениям.
//
Функция СокращенияАдресныхОбъектов(НаименованияАдресныхОбъектов) Экспорт

	Результат = Новый Соответствие;

	СтрокаЗапросГде = "";
	Если ТипЗнч(НаименованияАдресныхОбъектов) = Тип("Массив") И НаименованияАдресныхОбъектов.Количество() > 0 Тогда
		СтрокаЗапросГде = " ГДЕ АдресныеСокращения.Значение В(&СписокАдресныеСокращения) ";
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдресныеСокращения.Наименование КАК Наименование,
		|	АдресныеСокращения.Сокращение КАК Сокращение
		|ИЗ
		|	Справочник.АдресныеСокращения КАК АдресныеСокращения 
		| " + СтрокаЗапросГде + " 
		|
		|СГРУППИРОВАТЬ ПО
		|	АдресныеСокращения.Наименование,
		|	АдресныеСокращения.Сокращение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Если Не ПустаяСтрока(СтрокаЗапросГде) Тогда
		Запрос.УстановитьПараметр("АдресныеСокращения", НаименованияАдресныхОбъектов);
	КонецЕсли;
	ТаблицаАдресныхСокращений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаАдресныхСокращений Цикл
		Результат.Вставить(ВРег(СтрокаТаблицы.Наименование), СтрокаТаблицы.Сокращение);
	КонецЦикла;

	Возврат Результат;
	
КонецФункции