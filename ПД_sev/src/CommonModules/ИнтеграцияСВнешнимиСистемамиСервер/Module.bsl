//Возвращает таблицу значений с результатом запроса
//Запрос - запрос на языке SQL
//Структура - структура в которой в качестве ключа задается имя колонки результирующей таблицы значений
//а в качестве значение имя колонки в таблице внешнего источника данных
Функция ЧитатьДанныйНаВнешнейТаблицеADO(Структура, Запрос, СтрокаСоединения, ТЗ = Неопределено) экспорт
	Если ТЗ = Неопределено Тогда 
		ТЗ = Новый ТаблицаЗначений;
		Для каждого Поле ИЗ Структура Цикл
			ТЗ.Колонки.Добавить(Поле.Ключ);
			//Сообщить(Поле.Ключ);
		КонецЦикла;
	КонецЕсли;	
	Соединение = Новый COMОбъект("ADODB.Connection");
	Соединение.Open(СтрокаСоединения);
	
	RS = Новый COMОбъект("ADODB.Recordset");                        
	RS.Open(Запрос, Соединение);
	Пока RS.EOF() = 0 Цикл
		НоваяСтрокаТЗ = ТЗ.Добавить();
        Для каждого Поле ИЗ Структура Цикл
		//	ТЗ.Колонки.обавить(Поле.Ключ);
		//	Сообщить(Поле.Ключ);
		// Можно обращаться и обрабатывать значения полей выборки.
			Ключ = Поле.Ключ;
			Значение = Структура[Ключ];
		//	Сообщить(Значение);
			ИД = RS.Fields(Значение).Value;
			НоваяСтрокаТЗ[Ключ] = ИД;
		//Код = RS.Fields("Code").Value;
		//Сообщить(ИД);
		КонецЦикла;
		// Обработка других полей
		RS.MoveNext();
	КонецЦикла;
	RS.Close();
	Соединение.Close(); 
	
	Возврат ТЗ;
КонецФункции

Функция ПодключитьсяODBCСерверу(Соединение_param) Экспорт
	Соединение = Новый COMОбъект("ADODB.Connection");
	//Соединение_param = "driver={MySQL ODBC 3.51 Driver}; server="+СокрЛП(Сервер)+"; uid="+СокрЛП(ПользовательСервера)+"; pwd="+СокрЛП(ПарольСервера)+"; database="+СокрЛП(БазаСервера)+"; STMT=SET CHARACTER SET utf8";
	//Соединение_param = "driver={MySQL ODBC 3.51 Driver}; server="+СокрЛП(Сервер)+"; uid="+СокрЛП(ПользовательСервера)+"; pwd="+СокрЛП(ПарольСервера)+"; database="+СокрЛП(БазаСервера)+"; STMT=SET CHARACTER SET cp1251";
	Попытка
		Соединение.open(Соединение_param);
		СоединениеУстановлено = Истина;
		//Сообщить("Соединение установлено");
	Исключение
		Сообщить(ОписаниеОшибки());
		СоединениеУстановлено = Ложь;
		Возврат Неопределено
	КонецПопытки;
	
	Возврат Соединение;
КонецФункции

Функция ВыполнитьОперацияODBC(Запрос, СтрокаСоединения) Экспорт 
	ЗначениеВозврата = Истина;
	//СтрокаСоединения = ОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("FMСтрокаПодключения");
	Соединение = ПодключитьсяODBCСерверу(СтрокаСоединения);
	Запрос = СТРЗаменить(Запрос, Символ(13), "");
	//ЗапросКодировка = "SET NAMES cp1251";
	//Соединение.Execute(ЗапросКодировка);
	Если Не Соединение = Неопределено Тогда
		Попытка
			Соединение.Execute(Запрос);		   
			//Закрываем соединение
			Соединение.Close();
		Исключение
			Сообщить(ОписаниеОшибки());	
			ЗначениеВозврата = Ложь;
		КонецПопытки;
	Иначе
		ЗначениеВозврата = Ложь;	
	КонецЕсли;
		
	Возврат ЗначениеВозврата;
КонецФункции

Функция ВыполнитьВыборкуВODBC(ЗапросSQL, стрПоля, СтрокаСоединения) Экспорт 
	//СтрокаСоединения = ОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("FMСтрокаПодключения");	
	ТЗ = ИнтеграцияСВнешнимиСистемамиСервер.ЧитатьДанныйНаВнешнейТаблицеADO(стрПоля, ЗапросSQL, СтрокаСоединения);		
	Возврат ТЗ;
КонецФункции

Функция ОтправитьPushСообщение(УстройствоПолучатель, стрПараметры) Экспорт 
	Результат = Истина;
	Токен = ОбщегоНазначенияПовтИсп.ПолучитьЗначениеКонстанты("PushТокенПриложения");
	Если ПустаяСтрока(Токен) Тогда
		Сообщить("Не указан токен приложения, отправка push сообщений невозможна!");
		Возврат Ложь;
	КонецЕсли;
	Если ПустаяСтрока(УстройствоПолучатель.ИДPush) Тогда
		Сообщить("Для получателя " + Строка(УстройствоПолучатель) + " не задан ИДPush, отправка невозможна!");
		Возврат Ложь;
	КонецЕсли;
	
	
	Тело = ПодготовитьТелоСообщения(УстройствоПолучатель, Токен, стрПараметры);

	ssl = Новый ЗащищенноеСоединениеOpenSSL(неопределено, неопределено);
	HTTP = Новый HTTPСоединение("api.pushover.net", 443,,,,5,ssl);
	Заголовки = Новый Соответствие();
	Запрос = Новый HTTPЗапрос("/1/messages.json?" + Тело, Заголовки);
	Ответ = HTTP.ОтправитьДляОбработки(Запрос);
	Если НЕ Ответ.КодСостояния = 200 Тогда
		Сообщить(Ответ.ПолучитьТелоКакСтроку());
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат; 
КонецФункции

Функция ПодготовитьТелоСообщения(УстройствоПолучатель, Токен, стрПараметры)
	Тело = "token="+Токен+
	"&user="+УстройствоПолучатель.ИДPush+
	"&message="+стрПараметры.ТекстСообщения+
	"&title="+стрПараметры.Заголовок+
	"&url="+?(стрПараметры.Свойство("СсылкаНаСайт"), стрПараметры.СсылкаНаСайт, "")+
	"&url_title="+?(стрПараметры.Свойство("ОписаниеСсылки"), стрПараметры.ОписаниеСсылки, "")+
	"&priority="+?(стрПараметры.Свойство("ПриориетСообщения"), стрПараметры.ПриориетСообщения, "-1")+
	"&sound="+?(стрПараметры.Свойство("Мелодия"), стрПараметры.Мелодия, "pushover");
	Возврат Тело;
КонецФункции // ПодготовитьТелоСообщения()

//функции работы с web протоколами
Функция ПолучитьДанныеССервера(HTTPМетод, Сервер, ПараметрыЗапроса, ЗащищенноеСоединение = Ложь, POSTЗапросСтрока = "", Заголовки = Неопределено, Таймаут = 60, ИмяПользователя = Неопределено, Пароль = Неопределено, ИмяФайлаДляЗапроса = "", ОтветКакДвоичныеДанные = Ложь) Экспорт   
	Перем ЗначениеВозврата;
	ssl4 = Новый ЗащищенноеСоединениеOpenSSL( неопределено, неопределено );
	
	ОтветСервера   = Неопределено;
	Соединение = Новый HTTPСоединение(Сервер,, ИмяПользователя, Пароль,,Таймаут,?(ЗащищенноеСоединение,ssl4,Неопределено));
	//Соединение = Новый HTTPСоединение(Сервер);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = ПараметрыЗапроса;
	Если Не Заголовки = Неопределено Тогда
		Для Каждого Заголовок ИЗ Заголовки Цикл 
			HTTPЗапрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Не ПустаяСтрока(ИмяФайлаДляЗапроса) Тогда 
		HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаДляЗапроса);
		//ТекДок = Новый ТекстовыйДокумент;
		//ТекДок.Прочитать(ИмяФайлаДляЗапроса, КодировкаТекста.UTF8);
		//POSTЗапросСтрока = ТекДок.ПолучитьТекст();
		
	Иначе
		HTTPЗапрос.УстановитьТелоИзСтроки(POSTЗапросСтрока, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	Попытка
		//Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		Ответ = Соединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
	Исключение
		Сообщить("Не удалось получить данные с сервера.Проверьте правильность адреса сервера, порт, имя пользователя и пароль,а также настройки подключения к Интернет." + Символы.ПС + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Если Ответ = Неопределено Тогда
		Сообщить("Не удалось получить данные с сервера.Проверьте правильность адреса сервера, порт, имя пользователя и пароль,а также настройки подключения к Интернет.");
	Иначе
		Если ОтветКакДвоичныеДанные Тогда
			ТекстОтвета = Ответ.ПолучитьТелоКакДвоичныеДанные(); 	
		Иначе
			ТекстОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОтвета) ИЛИ ТекстОтвета = Неопределено Тогда
			Сообщить("Тело ответа содержит пустую строку! Код ответа " + Ответ.КодСостояния);
		Иначе 
			ЗначениеВозврата = ТекстОтвета;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ЗначениеВозврата;
КонецФункции

Функция ПолучитьТекстФайлаОтправки(Boundary,ИмяФайлаДанных,СтруктураСообщения,Знач ЗаголовокФайла, ТипФайла, Подпись = "") Экспорт 
	
	Итог = "";
	Если не ЗначениеЗаполнено(ЗаголовокФайла) Тогда
		ЗаголовокФайла = "empty";
	КонецЕсли;
	
	//ИмяФайлаДанных = СтруктураСообщения.text;
	Если Не ПустаяСтрока(Подпись) Тогда
		СтруктураСообщения.Вставить("caption", Подпись);	
	КонецЕсли;	
	СтруктураСообщения.Удалить("text");
	Разделитель = Символы.ПС;
	для Каждого стр из СтруктураСообщения Цикл 
		Итог = Итог	+ "--" + Boundary+Разделитель;
		Итог = Итог	+ "Content-Disposition: form-data; name="""+стр.Ключ+""""+Разделитель;
		Итог = Итог + Символы.ПС;
		ЗначениеПараметра =  стр.Значение;
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
			ЗначениеПараметра =  ОбщегоНазначения.ПолучитьJsonСтрокуИзОбъекта(ЗначениеПараметра);
		КонецЕсли;
		Итог = Итог	+ ЗначениеПараметра+Разделитель;
	КонецЦикла;
	Файл = Новый Файл(ИмяФайлаДанных);
	
	//РасширениеФайла =ПолучитьРасширениеФайлаПотипуТабДок();
	РасширениеФайла = Файл.Расширение;
	ИмяОтправляемогоФайла = ЗаголовокФайла+РасширениеФайла;
	Итог = Итог+"--" + Boundary+Разделитель;
	Итог = Итог+"Content-Disposition: form-data; name=""" + ТипФайла + """; filename="""+ИмяОтправляемогоФайла+""" "+Разделитель;
	Итог = Итог+"Content-Type: text/plain"+Разделитель;
	//Итог = Итог + Символы.ПС;
	
	ИмяФайлаНачала 		= ПолучитьИмяВременногоФайла("txt");
	ИмяИтоговогоФайла	= ПолучитьИмяВременногоФайла("txt");
	ИмяФайлаОкончания 	= ПолучитьИмяВременногоФайла("txt");
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНачала,КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаНачала,КодировкаТекста.UTF8);
	ЗаписьТекста.ЗаписатьСтроку(Итог);
	ЗаписьТекста.Закрыть();
	
	МассивФайловОбъединения = Новый Массив;
	МассивФайловОбъединения.Добавить(ИмяФайлаНачала);
	МассивФайловОбъединения.Добавить(ИмяФайлаДанных);
	
	Итог = Разделитель+"--" + Boundary + "--";
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОкончания,КодировкаТекста.ANSI);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОкончания,КодировкаТекста.UTF8);
	ЗаписьТекста.ЗаписатьСтроку(Итог);
	ЗаписьТекста.Закрыть();
	
	МассивФайловОбъединения.Добавить(ИмяФайлаОкончания);
	
	ОбъединитьФайлы(МассивФайловОбъединения,ИмяИтоговогоФайла);
	
	УдалитьФайлы(ИмяФайлаНачала);    
	УдалитьФайлы(ИмяФайлаОкончания);    
	
	
	Возврат ИмяИтоговогоФайла;
	
КонецФункции

Функция ПолучитьАдресИЗКоординат(Широта, Долгота) Экспорт 
	Перем ЗначениеВозврата;
	Сервер = "geocode-maps.yandex.ru";
	ПараметрыЗапроса = "/1.x/?geocode=" + Долгота + ", " + Широта + "&results=1";
	Ответ = ИнтеграцияСВнешнимиСистемамиСервер.ПолучитьДанныеССервера("GET", Сервер, ПараметрыЗапроса, Истина);
	ОбъектXDTO = ОбщегоНазначения.ПолучитьОбъектИзXML(Ответ);
	Если Не ОбъектXDTO = Неопределено Тогда
		Попытка
			ПолныйАдрес = ОбъектXDTO.GeoObjectCollection.featureMember.GeoObject.metaDataProperty.GeocoderMetaData.text;
			СокращенныйАдрес = ОбъектXDTO.GeoObjectCollection.featureMember.GeoObject.name;
		Исключение
			Сообщить("Не удалось получить адрес из ответа сервера" + Символы.ПС + ОписаниеОшибки());	
			Возврат ЗначениеВозврата;
		КонецПопытки;
		ЗначениеВозврата = НОвый Структура;
		ЗначениеВозврата.Вставить("ПолныйАдрес", ПолныйАдрес);
		ЗначениеВозврата.Вставить("СокращенныйАдрес", СокращенныйАдрес);
	КонецЕсли;
	
	Возврат ЗначениеВозврата;	
КонецФункции

Процедура ПерезаписатьЗначениеАдресаВДокументе(ССылкаРабочееВремя) Экспорт 
	булЗаписыватьДокумент = Ложь;
	ОбъектДокумент = ССылкаРабочееВремя.ПолучитьОбъект();
	Для Каждого СтрокаКоординаты ИЗ ОбъектДокумент.Координаты Цикл 
		Если Не ПустаяСтрока(СтрокаКоординаты.Широта) И Не ПустаяСтрока(СтрокаКоординаты.Долгота) Тогда
			стрОтвет = ПолучитьАдресИЗКоординат(СтрокаКоординаты.Широта, СтрокаКоординаты.Долгота);
			Если Не стрОтвет = Неопределено Тогда
				СтрокаКоординаты.Адрес = стрОтвет.СокращенныйАдрес;
				булЗаписыватьДокумент = Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если булЗаписыватьДокумент Тогда
		Попытка
			ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ТекстСообщения = ОбщегоНазначения.ПолучитьТексИзМассиваСообщенийПользователю();
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		РаботаСЭлектроннойПочтойСервер.ОтправитьПисьмоОбОшибке("Ошибка получения адреса из геометки", ТекстСообщения);		
	КонецЕсли;
КонецПроцедуры