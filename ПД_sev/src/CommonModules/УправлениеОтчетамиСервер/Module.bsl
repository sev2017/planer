Функция ПолучитьОборотыПоПроекту(Проект, Затраты = Ложь) Экспорт 
	ЗначениеВозврата = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПрибыльПоПроектамОстаткиИОбороты.СуммаПриход, 0) КАК Поступление,
	               |	ЕСТЬNULL(ПрибыльПоПроектамОстаткиИОбороты.СуммаРасход, 0) КАК Затрата
	               |ИЗ
	               |	РегистрНакопления.ПрибыльПоПроектам.ОстаткиИОбороты(, , , , Проект = &Проект) КАК ПрибыльПоПроектамОстаткиИОбороты";
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Затраты Тогда 
			ЗначениеВозврата = Выборка.Затрата;
		Иначе
			ЗначениеВозврата = Выборка.Поступление;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ПолучитьОстаткиВыплатыДляСотрудника(Сотрудник) Экспорт 
	ЗначениеВозврата = 0;
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат ЗначениеВозврата;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НачисленияОстатки.СуммаОстаток
	               |ИЗ
	               |	РегистрНакопления.Начисления.Остатки(, Сотрудник = &Сотрудник) КАК НачисленияОстатки";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВозврата = Выборка.СуммаОстаток;
	КонецЕсли;	
	Возврат ЗначениеВозврата;	
КонецФункции

Функция ПолучитьТаблицуДляТеста() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Начисления.Сотрудник,
	               |	Начисления.Сумма
	               |ИЗ
	               |	РегистрНакопления.Начисления КАК Начисления";
	ТЗ = Запрос.Выполнить().Выгрузить();
	АдресХранилища = ПоместитьВоВременноеХранилище(ТЗ);
	Возврат АдресХранилища;
КонецФункции

//Позволяет программно сформировать отчет на основе СКД и вернуть табличный документ с данными расшифровки
// Параметры
//  ИмяОтчета(строка)  – имя отчета, как в конфигураторе
//  ИмяСхемыКомпоновки(строка)  – название макета СКД в этом отчете(для случае когда таких схем может быть несколько)
//  МассивСтруктурОтбора(массив)  – Массив структур содержащих элементы отбора которые необходимо применить к отчету
//		Элементы структуры
//			ЛевоеЗначение(строка) - имя поля к которому необходимо применить отбор(называть как на вкладке "Отбор" в СКД) 
//			ВидСравнения(строка) - названия(именно названия, строка) вида сравнения из перечисления ВидСравненияКомпоновкиДанных 
//			ПравоеЗначение(произвольное) - Значение отбора 
//	УникальныйИдентификаторДляДанныхРасшифровки - Уникальный идентификатор по которому во временное хранилище
//	помещяются данные расшифровки(если расшифровка не требуется то этот параметр можно проигнорировать)
//
// Возвращаемое значение:
//   Структура   
//		ТабДок(Табличный документ)– результирующий табличный документ
//		АдресДанныеРасшифровки(адрес в хранилище значений)– Адрес в хранилище значений по которому помещаются данные расшифровки
Функция ПолучитьТабДокИзОтчетаСКД(ИмяОтчета, ИмяСхемыКомпоновки, ИмяВарианта = "", МассивСтруктурОтбора = Неопределено, УникальныйИдентификаторДляДанныхРасшифровки = Неопределено, МассивСтруктурПараметры = Неопределено) Экспорт 
	Перем Настройки;
	стрВозврат = Новый Структура;
	
	ОтчетОбъект = Отчеты[ИмяОтчета];
	СхемаКомпоновкиДанных = ОтчетОбъект.ПолучитьМакет(ИмяСхемыКомпоновки);
	Если Не ПустаяСтрока(ИмяВарианта) Тогда
		Для Каждого Вариант ИЗ СхемаКомпоновкиДанных.ВариантыНастроек Цикл 	
			Если Вариант.Имя = ИмяВарианта Тогда
				Настройки = Вариант.Настройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Из схемы возьмем настройки по умолчанию
	Если Настройки = Неопределено Тогда
		Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	Если Не МассивСтруктурОтбора = Неопределено Тогда
		ОтборЭлементы = Настройки.Отбор.Элементы;
		Для Каждого ЭлементОтбора ИЗ МассивСтруктурОтбора Цикл 
			НовыйЭлементОтбора = ОтборЭлементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементОтбора.ЛевоеЗначение);
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных[ЭлементОтбора.ВидСравнения];
			НовыйЭлементОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
		КонецЦикла;
	КонецЕсли;
	Если Не МассивСтруктурПараметры = Неопределено Тогда
		ПараметрыЭлементы = Настройки.ПараметрыДанных.Элементы;
		Для Каждого ЭлементПараметр ИЗ МассивСтруктурПараметры Цикл 
			ПараметрКомпоновки = ПараметрыЭлементы.Найти(ЭлементПараметр.ИмяПараметра);
			Если ПараметрКомпоновки = Неопределено Тогда
				ПараметрКомпоновки = ПараметрыЭлементы.Добавить();
				ПараметрКомпоновки.Параметр  = Новый ПараметрКомпоновкиДанных(ЭлементПараметр.ИмяПараметра);
			КонецЕсли;
			ПараметрКомпоновки.Значение = ЭлементПараметр.ЗначениеПараметра;
			ПараметрКомпоновки.Использование = Истина;

		КонецЦикла;
	КонецЕсли;
	
	//Помещаем в переменную данные о расшифровке данных
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

	//Формируем макет, с помощью компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	//Передаем в макет компоновки схему, настройки и данные расшифровки
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	//Выполним компоновку с помощью процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ТабДок = Новый ТабличныйДокумент;
	//Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	//ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.УстановитьДокумент(ТабДок);  
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если Не УникальныйИдентификаторДляДанныхРасшифровки = Неопределено Тогда
		АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификаторДляДанныхРасшифровки);	
		стрВозврат.Вставить("АдресДанныеРасшифровки", АдресДанныеРасшифровки);
	КонецЕсли;	
	стрВозврат.Вставить("ТабДок", ТабДок);
	
	Возврат стрВозврат;	

КонецФункции // ПолучитьТабДокИзОтчетаСКД()

//Возвращает значение расшифровки по идентификатору
//Параметры 
// Расшифровка(число) - идентификатор расшифровываемого значения в массиве данных расшифровки
//						стандартный параметр "Расшифровка" в стандартной процедуре "ОбработкаРасшифровки" в табличном документе
// АдресДанныеРасшифровки(адрес во временном хранилище) - адрес данных расшифровки во временном хранилище 
Функция ВернутьЗначениеРасшифровки(Расшифровка, АдресДанныеРасшифровки) Экспорт 
	Перем ЗначениеВозврата;
	Данные = ПолучитьИзВременногоХранилища(АдресДанныеРасшифровки);
	Значение = Данные.Элементы.Получить(Расшифровка).ПолучитьПоля()[0].Значение;
	Если Не  Значение = Null Тогда
		ЗначениеВозврата = Значение;
	КонецЕсли;
	Возврат ЗначениеВозврата;
КонецФункции
