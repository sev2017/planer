Функция УниверсальнаяОперация(ДанныеХранилища)
	ДанныеИзХранилища = ДанныеХранилища.Хранилище[0].Получить(); 
	ИмяВызываемойПроцедуры 	= ДанныеИзХранилища.Параметры.ИмяВызываемойПроцедуры;
	УИДУстройства 			= ДанныеИзХранилища.Параметры.УИДУстройства;

	Если Не ПустаяСтрока(УИДУстройства) Тогда
		ЭлементТСД = Справочники.МП_ВнешниеУстройства.НайтиПоРеквизиту("УИД", УИДУстройства);
		Если ЭлементТСД = ПредопределенноеЗначение("Справочник.МП_ВнешниеУстройства.ПустаяСсылка") Тогда
			ЭлементТСД = Неопределено;		
		КонецЕсли;
	КонецЕсли;
	//
	Если ДанныеИзХранилища.Параметры.Свойство("ДополнительныеПараметры") Тогда 
		ДопПараметры = ДанныеИзХранилища.Параметры.ДополнительныеПараметры;
	КонецЕсли;
	
	Если ДанныеИзХранилища.Свойство("ПередаваемыеДанные") Тогда 
		ПередаваемыеДанные = ДанныеИзХранилища.ПередаваемыеДанные;
	КонецЕсли;
	//
	Если ИмяВызываемойПроцедуры = "Авторизация" Тогда 
		//ГуидСклад = ДанныеХранилища.Хранилище[0].Получить().Параметры.ДополнительныеПараметры.ГуидСклад;
		Пакет = МП_ОбщегоНазначения.Авторизация(УИДУстройства);//, ГуидСклад);
	ИначеЕсли ИмяВызываемойПроцедуры = "ЗапросРазрешенияМенятьДокумент" Тогда 
		Пакет = МП_ОбщегоНазначения.ЗапросРазрешенияМенятьДокумент(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	ИначеЕсли ИмяВызываемойПроцедуры = "СоздатьОбновитьДокументРабочееВремя" Тогда 
		Пакет = МП_ОбщегоНазначения.СоздатьОбновитьДокументРабочееВремя(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);
	ИначеЕсли ИмяВызываемойПроцедуры = "ПроверкаСОгласованностиДокумента" Тогда 
		Пакет = МП_ОбщегоНазначения.ПроверкаСОгласованностиДокумента(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);
	ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьОтчетПоНачислениям" Тогда 
		Пакет = МП_ОбщегоНазначения.ПолучитьОтчетПоНачислениям();
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНоменклатуру" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПолучитьНоменклатуру(ЭлементТСД); //Удалить
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНоменклатуруПоштучно" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПолучитьНоменклатуруПоШтучно(ДанныеХранилища, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНоменклатуруПоШтрихКоду" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПолучитьНоменклатуруПоШтрихкоду(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНоменклатуруПоАртикулу" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПолучитьНоменклатуруПоАртикулу(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНоменклатуруИзДокумента" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПолучитьНоменклатуруИзДокумента(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПривязатьШтрихкодКНоменклатуре" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ПривязатьШтрихкодКНоменклатуре(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);		
	//ИначеЕсли ИмяВызываемойПроцедуры = "СоздатьДокументИнвентаризации" Тогда 
	//	Пакет = МП_ОбщегоНазначения.СоздатьДокументИнвентаризации(ДанныеХранилища, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "СоздатьДокументыОприходования" Тогда 
	//	Пакет = МП_ОбщегоНазначения.СоздатьДокументыОприходования(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);		
	ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьПользователяСклад" Тогда 
		Пакет = МП_ОбщегоНазначения.ПолучитьОсновныеСправочники(ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ИмпортированиеФотографий" Тогда 
	//	Пакет = МП_ОбщегоНазначения.ИмпортированиеФотографий(ДанныеХранилища, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьОстаткиПоСкладам" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьОстаткиПоСкладам(ДанныеХранилища, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучениеПОнТДляОбработки" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучениеПОнТДляОбработки(ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьССылкуНаДокументПоШтрихкоду" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьССылкуНаДокументПоШтрихкоду(ДанныеХранилища);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьССылкуНаДокументПоШтрихкодуV2" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьССылкуНаДокументПоШтрихкодуV2(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);		
	//ИначеЕсли ИмяВызываемойПроцедуры = "СозданиеПриходногоОрдераПоСсылкеНаРасходный" Тогда   
	//	Пакет = МП_ОбщегоНазначения.СозданиеПриходногоОрдераПоссылкеНаРасходный(ДанныеХранилища, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "СозданиеНовойНоменклатуры" Тогда   
	//	Пакет = МП_ОбщегоНазначения.СозданиеНовойНоменклатуры(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ,ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьДокументыПоОтбору" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьДокументыПоОтбору(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);
	////ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьВерсиюДанных" Тогда   
	////	Пакет = МП_ОбщегоНазначения.ПолучитьВерсиюДанных();
	////Возврат Пакет;	
	//ИначеЕсли ИмяВызываемойПроцедуры = "РаспечаткаДокументов" Тогда   
	//	Пакет = МП_ОбщегоНазначения.РаспечаткаДокументов(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);			
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьЗначениеРеквизитовДокумента" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьЗначениеРеквизитовДокумента(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);	
	//ИначеЕсли ИмяВызываемойПроцедуры = "МаркироватьПеремещениеКакТранзитное" Тогда   
	//	Пакет = МП_ОбщегоНазначения.МаркироватьПеремещениеКакТранзитное(ДанныеИзХранилища.Параметры.ПередаваемыеДанные, ЭлементТСД);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьДанныеПоТранзиту" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьДанныеПоТранзиту(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "СоздатьПриходныйОрдерПоРасходному" Тогда   
	//	Пакет = МП_ОбщегоНазначения.СоздатьПриходныйОрдерПоРасходному(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПечатьЭтикетки" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПечатьЭтикетки(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);	
	ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьНастройкиДляТСД" Тогда   
		Пакет = МП_ОбщегоНазначения.ПолучитьНастройкиДляТСД(ЭлементТСД);		
	//ИначеЕсли ИмяВызываемойПроцедуры = "ВыгрузитьФотографииСПривязкойКДокументу" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ВыгрузитьФотографииСПривязкойКДокументу(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПолучитьМаршрутныйЛист" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПолучитьМаршрутныйЛист(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);		
	//ИначеЕсли ИмяВызываемойПроцедуры = "МаршрутныйЛист_ЗабранДоставлен" Тогда   
	//	Пакет = МП_ОбщегоНазначения.МаршрутныйЛист_ЗабранДоставлен(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);	
	//ИначеЕсли ИмяВызываемойПроцедуры = "Демонстрация_ПолучитьПоказатели" Тогда   
	//	Пакет = МП_ОбщегоНазначения.Демонстрация_ПолучитьПоказатели(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ПроверкаНаличиеФотографииВЦБПоГуид" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ПроверкаНаличиеФотографииВЦБПоГуид(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	//ИначеЕсли ИмяВызываемойПроцедуры = "ЗагрузитьФотографию" Тогда   
	//	Пакет = МП_ОбщегоНазначения.ЗагрузитьФотографию(ДанныеИзХранилища.Параметры.ПередаваемыеДанные);
	КонецЕсли;
	//
	Если ТипЗНЧ(Пакет) <> Тип("ОбъектXDTO") Тогда
		ХранилищаЗначенийТип	= ФабрикаXDTO.Тип("http://www.universal-package.org", "ХранилищаЗначений");
		ХЗ = Новый ХранилищеЗначения(Пакет);
		Пакет		= ФабрикаXDTO.Создать(ХранилищаЗначенийТип);		
		Пакет.Хранилище.Добавить(ХЗ);
	КонецЕсли;
	
	Возврат Пакет;
КонецФункции
